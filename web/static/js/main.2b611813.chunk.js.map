{"version":3,"sources":["helpers/delay.ts","components/lazy-component.tsx","helpers/urls.ts","components/bar-graph.tsx","components/nft-card.tsx","components/nft-loader.tsx","components/lazy-list.tsx","components/nft-project.tsx","components/nft-projects.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["delay","timeout","a","Promise","resolve","setTimeout","globalRelayoutCallbacks","Date","now","activeNotifyRelayoutId","notifyRelayout","notifyRelayoutId","i","length","callback","window","addEventListener","IntersectionObserver","observe","document","getElementsByTagName","nextLazyComponentId","LazyComponent","children","onLoad","placeholderRef","useRef","useState","shouldLoad","setShouldLoad","isDoneRef","useEffect","current","placeholder","iRelayout","push","divRect","getBoundingClientRect","screenBottom","scrollY","innerHeight","top","unsub","ref","style","minWidth","minHeight","getProjectJsonUrl","projectKey","getNftJsonUrl","tokenId","getIpfsUrl","nftUrl","replace","BarGraphCell","ratio","text","position","className","zIndex","width","toFixed","height","color","NftCardPlaceholder","props","NftCard","nft","name","rarityScore","href","external_url","alt","src","image","display","flexDirection","fontSize","flex","attributeRarities","map","x","Fragment","trait_type","value","fontWeight","ratioScore","NftLoader","setNft","fetch","result","json","obj","LazyList","items","getItemKey","ItemComponent","loadCount","setLoadCount","lastLoadCount","itemsLoaded","slice","index","s","onLoaded","item","NftProjectLoader","projectRarity","setProjectRarity","nftProjectUrl","loaded","loadProjectRarityData","doc","traitTypes","Set","tokenLookups","forEach","traitType","traitTypeTokenLookups","filter","includedTokenIds","flatMap","tokenIds","missingTokenIds","tokenIdsByRank","t","has","trait_value","NftProject","setTokenIds","nftListRef","onSelect","args","tokens","scrollIntoView","behavior","onClick","location","TraitTypesList","TraitValuesList","NftProjectsLoader","projects","NftProjects","project","projectMetadata","NftProjectCard","external_link","App","route","pathname","split","undefined","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2b611813.chunk.js","sourcesContent":["export async function delay(timeout: number): Promise<void> {\n    return await new Promise((resolve) => {\n        setTimeout(resolve, timeout);\n    });\n}","import React, { ReactNode, useEffect, useRef, useState } from 'react';\nimport { delay } from '../helpers/delay';\n\nconst debug_timeStart = Date.now();\nconst globalRelayoutCallbacks = [] as (null | (()=>boolean))[];\nlet activeNotifyRelayoutId = 0;\nconst notifyRelayout = async () => {\n\n    // Cancellable\n    activeNotifyRelayoutId++;\n    let notifyRelayoutId = activeNotifyRelayoutId;\n    await delay(100);\n\n    // console.log('LazyComponent notifyRelayout', {notifyRelayoutId});\n    \n    let i = 0;\n    while(i < globalRelayoutCallbacks.length){\n        const callback = globalRelayoutCallbacks[i];\n        if(callback && callback()){\n            await delay(25);\n        }\n        i++;\n\n        if(notifyRelayoutId !== activeNotifyRelayoutId){\n            // Cancelled\n            // console.log('LazyComponent notifyRelayout - Cancelled', {notifyRelayoutId});\n            return;\n        }\n    }\n};\nwindow.addEventListener('scroll', notifyRelayout);\nwindow.addEventListener('load', ()=>{\n    const observer = new IntersectionObserver(notifyRelayout);\n    // Observe any element\n    observer.observe(document.getElementsByTagName('body')[0]);\n});\n\nlet nextLazyComponentId = 0;\n\nexport const LazyComponent = ({ \n    children,\n    onLoad,\n}:{ \n    children: ReactNode,\n    onLoad?: () => void,\n })=>{\n\n    const placeholderRef = useRef(null as null | HTMLDivElement);\n    const [shouldLoad, setShouldLoad] = useState(false);\n    const isDoneRef = useRef(false);\n    const lazyComponentId = useRef(nextLazyComponentId++);\n\n    useEffect(() => {\n        // console.log('LazyComponent useEffect', {lazyComponentId});\n\n        if( !placeholderRef.current ){ \n            // console.log('LazyComponent useEffect - SKIP placeholderRef is missing', {lazyComponentId});\n            return; \n        }\n        const placeholder = placeholderRef.current;\n        isDoneRef.current = false;\n      \n        const loadIfVisible = () => {\n            // console.log('LazyComponent useEffect:loadIfVisible', {lazyComponentId});\n\n            if( !placeholderRef.current ){ \n                // console.log('LazyComponent useEffect:loadIfVisible - SKIP placeholderRef is missing', {lazyComponentId});\n                return false; \n            }\n            if( isDoneRef.current ){ \n                // console.log('LazyComponent useEffect:loadIfVisible - SKIP isDone', {lazyComponentId});\n                return false; \n            }\n\n            const divRect = placeholder.getBoundingClientRect();\n            const screenBottom = window.scrollY + window.innerHeight;\n            const isOnScreen = divRect.top < screenBottom;\n\n            if(!isOnScreen){ return false; }\n            // console.log(`isOnScreen`,{ time: Date.now() - debug_timeStart, iRelayout, divRect, screenBottom, isOnScreen });\n            \n            isDoneRef.current = true;\n            unsub();\n            setShouldLoad(true);\n            notifyRelayout();\n            onLoad?.();\n\n            return true;\n        };\n\n        const iRelayout = globalRelayoutCallbacks.length;\n        globalRelayoutCallbacks.push(loadIfVisible);\n        const unsub = ()=>{\n            globalRelayoutCallbacks[iRelayout] = null;\n        };\n\n        notifyRelayout();\n\n        return () => {\n            isDoneRef.current = true;\n            unsub();\n        };\n    },[children, onLoad]);\n\n    // console.log('LazyComponent RENDER', {lazyComponentId});\n    return (\n        <>  \n            {!shouldLoad && <div ref={placeholderRef} style={{minWidth: 300, minHeight: 300}}/>}\n            {shouldLoad && children}\n        </>\n    );\n};","export const getProjectsJsonUrl = ()=>`/data/projects.json`;\nexport const getProjectJsonUrl = (projectKey:string)=>`/data/${projectKey}/project.json`;\nexport const getNftJsonUrl = (projectKey:string, tokenId: string)=>`/data/${projectKey}/${tokenId}.json`;\nexport const getIpfsUrl = (nftUrl:string) => nftUrl.replace('ipfs://', 'https://gateway.pinata.cloud/ipfs/');\n","import React, { useRef } from 'react';\r\n\r\nexport const BarGraphCell = ({ ratio, text }:{ ratio: number, text?: string })=>{\r\n    return (\r\n        <div style={{position:'relative'}}>\r\n            <div className='bar-background' style={{\r\n                position:'absolute',\r\n                zIndex: 0,\r\n                width: `${(100 * ratio).toFixed(0)}%`,\r\n                height: '100%',\r\n                }}>\r\n            </div>\r\n            <div style={{color:'#FFFFFF', position:'relative', zIndex: 10}}>\r\n                {text ?? `${(100 * ratio).toFixed(2)}%`}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport { INftRarity } from '@crypto-dev-amigos/common';\nimport { LazyComponent } from './lazy-component';\nimport { getIpfsUrl } from '../helpers/urls';\nimport { BarGraphCell } from './bar-graph';\n\nexport const NftCardPlaceholder = (props:{})=>{\n    return (\n        <>\n            <div className={'nft-card'}>\n                <div style={{height: 300}}>Loading...</div>\n            </div>\n        </>\n    );\n}\n\nexport const NftCard = ({nft}:{ nft: INftRarity }) => {\n\n    return (\n        <>\n            <div className={'nft-card'}>\n                {/* <div><b>Token ID:</b> {nft.nft.id}</div> */}\n                <div><b>{nft.nft.name}</b></div>\n                <div><b>Rarity Score:</b> {nft.rarityScore.toFixed(2)}</div>\n                <div>\n                    <a href={getIpfsUrl(nft.nft.external_url)}>External Link</a>\n                </div>\n\n                <div className={'nft-card-image'}>\n                    <LazyComponent>\n                        <img alt='nft' src={getIpfsUrl(nft.nft.image)}/>\n                    </LazyComponent>\n                </div>\n                <div>\n                    <div style={{ display:'flex', flexDirection:'row', fontSize:`0.8em`, color: 'white' }}>\n                                <div style={{flex: 1}}>{'Content'}</div>\n                                <div style={{flex: 1}}>{'Attribute'}</div>\n                                <div style={{flex: 1}}>{'Commonality'}</div>\n                                <div style={{flex: 1}}>{'Rarity Score'}</div>\n                    </div>\n                    {nft.attributeRarities.map(x=>(\n                        <React.Fragment key={x.trait_type}>\n                            <div style={{ display:'flex', flexDirection:'row' }}>\n                                <div style={{flex: 1}}>{x.trait_type}</div>\n                                <div style={{flex: 1}}>\n                                    <span style={x.value !== \"[Missing]\"?{fontWeight:'bold'}:{}}>{x.value}</span>\n                                </div>\n                                <div style={{flex: 1}}>\n                                    <BarGraphCell ratio={x.ratio} />\n                                </div>\n                                <div style={{flex: 1}}>{`${x.ratioScore.toFixed(2)}`}</div>                                \n                            </div>\n                        </React.Fragment>\n                    ))}\n                </div>\n            </div>\n        </>\n    );\n};\n\n","import React, { useEffect, useState } from 'react';\nimport { INftRarityDocument } from '@crypto-dev-amigos/common';\nimport { NftCard, NftCardPlaceholder } from './nft-card';\nimport { getNftJsonUrl } from '../helpers/urls';\n\nexport const NftLoader = ({ projectKey, tokenId }:{ projectKey:string, tokenId:string })=>{\n\n    const [nft, setNft] = useState(null as null | INftRarityDocument);\n\n    useEffect(() => {\n        (async () => {\n            const nftUrl = getNftJsonUrl(projectKey, tokenId);\n            // console.log('NftLoader', {nftUrl});\n            const result = await fetch(nftUrl);\n            const obj = await result.json() as INftRarityDocument;\n            setNft(obj);\n        })();\n    }, [projectKey, tokenId]);\n\n    // console.log('NftLoader RENDER', {projectKey, tokenId});\n    return (\n        <>\n            {!nft && <NftCardPlaceholder />}\n            {nft && <NftCard nft={nft}/>}\n        </>\n    );\n};","import React, { useRef } from 'react';\nimport { useState } from 'react';\nimport { LazyComponent } from './lazy-component';\n\nexport const LazyList = <T extends {}>({\n    items, \n    getItemKey, \n    ItemComponent \n}:{ \n    items:T[], \n    getItemKey:(item:T)=>string, \n    ItemComponent: (props:{item:T}) => JSX.Element,\n})=>{\n\n    const PAGE_SIZE = 12;\n    const NEAR_END_COUNT = 3;\n    const [loadCount, setLoadCount] = useState(PAGE_SIZE);\n    const lastLoadCount = useRef(PAGE_SIZE);\n    lastLoadCount.current = loadCount;\n\n    const onLoaded = (index:number)=>{\n        // Skip if already loaded more\n        if(lastLoadCount.current !== loadCount){ return; }\n\n        // Skip if not near the end\n        if(index + NEAR_END_COUNT < loadCount){ return; }\n\n        // Load more\n        // console.log('# LazyList: loadMore', {loadCount});\n        setLoadCount(s=> s + PAGE_SIZE);\n    }\n\n    const itemsLoaded = items.slice(0, loadCount);\n\n    \n    // console.log('LazyList RENDER', {itemsLength: items.length, loadedLength: itemsLoaded.length});\n    return (\n        <>\n            {itemsLoaded.map((x,index)=>(\n                <React.Fragment key={getItemKey(x)} >\n                    <LazyComponent onLoad={() => onLoaded(index)}>\n                        <ItemComponent item={x}/>\n                    </LazyComponent>\n                </React.Fragment>\n            ))}\n        </>\n    );\n};\n\n","import React, { useEffect, useRef, useState } from 'react';\nimport type { INftProjectRarityDocument, INftRarity, MISSING_ATTRIBUTE_VALUE as MISSING_ATTRIBUTE_VALUE_TYPE } from '@crypto-dev-amigos/common';\nimport { NftCard } from './nft-card';\nimport { LazyList } from './lazy-list';\nimport { NftLoader } from './nft-loader';\nimport { getNftJsonUrl, getProjectJsonUrl } from '../helpers/urls';\nimport { BarGraphCell } from './bar-graph';\n\n// Workaround for importing implementation\nconst MISSING_ATTRIBUTE_VALUE: typeof MISSING_ATTRIBUTE_VALUE_TYPE = `[Missing]`;\n\nexport const NftProjectLoader = ({ projectKey }:{ projectKey:string })=>{\n\n    const [projectRarity, setProjectRarity] = useState(null as null | INftProjectRarityData);\n\n    useEffect(() => {\n        (async () => {\n            const nftProjectUrl = getProjectJsonUrl(projectKey);\n            // console.log('projectKey', { projectKey, nftProjectUrl });\n            const result = await fetch(nftProjectUrl);\n            const obj = await result.json() as INftProjectRarityDocument;\n\n            const loaded = loadProjectRarityData(obj);\n\n            setProjectRarity(loaded);\n        })();\n    }, [projectKey]);\n\nreturn (\n    <>\n        {projectRarity && <NftProject projectKey={projectKey} projectRarity={projectRarity} />}\n    </>\n);\n};\n\ntype INftProjectRarityData = {\n    tokenIdsByRank: INftProjectRarityDocument['tokenIdsByRank']\n    tokenLookups: (INftProjectRarityDocument['tokenLookups'][number] & {\n        ratio: number;\n    })[],\n    traitTypes: string[];\n};\nconst loadProjectRarityData = (doc: INftProjectRarityDocument): INftProjectRarityData => {\n    const traitTypes = [...new Set(doc.tokenLookups.map(x=>x.trait_type))];\n\n    // Add [Missing] and [All]\n    traitTypes.forEach(traitType => {\n        const traitTypeTokenLookups = doc.tokenLookups\n            .filter(x=>x.trait_type === traitType);\n        const includedTokenIds = new Set(traitTypeTokenLookups.flatMap(x=>x.tokenIds));\n        const missingTokenIds = doc.tokenIdsByRank.filter(t => !includedTokenIds.has(t));\n        // Missing\n        if(missingTokenIds.length){\n            doc.tokenLookups.push({\n                trait_type: traitType,\n                trait_value: MISSING_ATTRIBUTE_VALUE,\n                tokenIds: missingTokenIds\n            });\n        }\n\n        // All\n        doc.tokenLookups.push({\n            trait_type: traitType,\n            trait_value: '[All]',\n            tokenIds: doc.tokenIdsByRank,\n        });\n    });\n\n    return {\n        tokenIdsByRank: doc.tokenIdsByRank,\n        tokenLookups: doc.tokenLookups.map(x=>({\n            ...x,\n            ratio: x.tokenIds.length / doc.tokenIdsByRank.length,\n        })),\n        traitTypes,\n    };\n};\n\nexport const NftProject = ({ projectKey, projectRarity }:{ projectKey:string, projectRarity:INftProjectRarityData}) => {\n\n    const [tokenIds, setTokenIds] = useState(projectRarity.tokenIdsByRank);\n    const nftListRef = useRef(null as null | HTMLDivElement)\n\n    const onSelect = (args: { traitType: string, value: string, tokens: number[] }) => {\n        setTokenIds(args.tokens);\n        nftListRef.current?.scrollIntoView({behavior:'smooth'});\n    };\n\n    return (\n        <>\n            <div>\n                <TraitTypesList projectRarity={projectRarity} onSelect={onSelect}/>\n            </div>\n            <div className='nft-list' ref={nftListRef}>\n                {projectRarity && (\n                    <LazyList items={tokenIds} getItemKey={x=>`${x}`} ItemComponent={({item})=>(\n                        <div onClick={()=>window.location.href=`${projectKey}/${item}`}>\n                            <NftLoader projectKey={projectKey} tokenId={`${item}`} />\n                        </div>\n                    )}/>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport const TraitTypesList = ({ projectRarity, onSelect }:{ projectRarity:INftProjectRarityData, onSelect: (args:{ traitType: string, value: string, tokens: number[] })=>void })=>{\n    return (\n        <div className='nft-trait-types'>\n            {projectRarity.traitTypes.map(x=>(\n                <React.Fragment key={x}>\n                    <TraitValuesList traitType={x} projectRarity={projectRarity} onSelect={onSelect} />\n                </React.Fragment>\n            ))}\n        </div>\n    );\n};\n\nexport const TraitValuesList = ({ traitType, projectRarity, onSelect }:{ traitType: string, projectRarity:INftProjectRarityData, onSelect: (args:{ traitType: string, value: string, tokens: number[] })=>void })=>{\n   \n    const traitTypeTokenLookups = projectRarity.tokenLookups\n        .filter(x=>x.trait_type === traitType);\n   \n    return (\n        <div className='nft-trait-type'>\n            <div>\n                {traitType}\n            </div>\n            <div className='nft-trait-values'>\n                {traitTypeTokenLookups.map(x=>(\n                    <React.Fragment key={`${x.trait_type}:${x.trait_value}`}>\n                        <div className='nft-trait-value' onClick={()=>onSelect({traitType: x.trait_type, value: x.trait_value, tokens: x.tokenIds})}>\n                            <BarGraphCell ratio={x.ratio} text={x.trait_value}/>\n                        </div>\n                    </React.Fragment>\n                ))}\n            </div>\n        </div>\n    );\n};\n\n","import React, { useEffect, useState } from 'react';\nimport { INftProjectMetadata, INftProjectsDocument } from '@crypto-dev-amigos/common';\nimport { LazyList } from './lazy-list';\nimport { NftLoader } from './nft-loader';\nimport { getIpfsUrl, getProjectsJsonUrl } from '../helpers/urls';\nimport { LazyComponent } from './lazy-component';\n\nexport const NftProjectsLoader = (props:{ })=>{\n\n    const [projects, setProjectRarity] = useState(null as null | INftProjectsDocument);\n\n    useEffect(() => {\n        (async () => {\n            const nftProjectUrl = getProjectsJsonUrl();\n            // console.log('projectKey', { projectKey, nftProjectUrl });\n            const result = await fetch(nftProjectUrl);\n            const obj = await result.json() as INftProjectsDocument;\n            setProjectRarity(obj);\n        })();\n    }, []);\n\nreturn (\n    <>\n        {projects && <NftProjects projects={projects} />}\n    </>\n);\n};\n\nexport const NftProjects = ({ projects }:{ projects: INftProjectsDocument }) => {\n    return (\n        <>\n            <div className='nft-list'>\n                {projects && (\n                    <LazyList items={projects.projects} getItemKey={x=>`${x.projectKey}`} ItemComponent={({item})=>(\n                        <NftProjectCard projectKey={item.projectKey} project={item.projectMetadata} />\n                    )}/>\n                )}\n            </div>\n        </>\n    );\n};\n\n\nexport const NftProjectCard = ({projectKey, project}:{ projectKey:string, project: INftProjectMetadata }) => {\n\n    return (\n        <>\n            <div className={'nft-card'}>\n                {/* <div><b>Token ID:</b> {nft.nft.id}</div> */}\n                <div><b>{project.name}</b></div>\n                <div>\n                    <a href={getIpfsUrl(project.external_link)}>External Link</a>\n                </div>\n\n                <div className={'nft-card-image'} onClick={()=>window.location.href=`${projectKey}`}>\n                    <LazyComponent>\n                        <img alt='nft' src={getIpfsUrl(project.image)}/>\n                    </LazyComponent>\n                </div>\n            </div>\n        </>\n    );\n};\n\n","import React from 'react';\nimport './CssReset.css';\nimport './App.css';\nimport { NftLoader } from './components/nft-loader';\nimport { NftProjectLoader } from './components/nft-project';\nimport { NftProjectsLoader } from './components/nft-projects';\n\nfunction App() {\n\n  const route = window.location.pathname.split('/');\n  const projectKey = route[1] ?? undefined;\n  const tokenId = route[2] ?? undefined;\n\n  console.log('route', {route, projectKey, tokenId});\n\n  if(projectKey && tokenId){\n    return (\n      <div className=\"App\">\n        <div className='nft-container-single'>\n          <NftLoader projectKey={projectKey} tokenId={tokenId}/>\n        </div>\n      </div>\n    );\n  }\n\n  if(projectKey){\n    return (\n      <div className=\"App\">\n        <NftProjectLoader projectKey={projectKey}/>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n        <NftProjectsLoader/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}