{"version":3,"sources":["components/nft-card.tsx","components/nft-loader.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NftCard","nft","className","name","rarityScore","toFixed","href","external_url","replace","style","width","height","src","image","display","flexDirection","fontSize","color","flex","attributeRarities","map","x","Fragment","trait_type","value","fontWeight","position","zIndex","ratio","ratioScore","NftLoader","nftUrl","useState","setNft","useEffect","a","console","log","fetch","result","json","obj","App","route","window","location","pathname","split","projectName","undefined","tokenId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c239dd4.chunk.js","sourcesContent":["import React from 'react';\r\nimport { INftRarity } from '@crypto-dev-amigos/common';\r\n\r\nexport const NftCard = ({nft}:{ nft: INftRarity }) => {\r\n\r\n    return (\r\n        <>\r\n            <div className={'nft-card'}>\r\n                {/* <div><b>Token ID:</b> {nft.nft.id}</div> */}\r\n                <div><b>{nft.nft.name}</b></div>\r\n                <div><b>Rarity Score:</b> {nft.rarityScore.toFixed(2)}</div>\r\n                <div>\r\n                    <a href={nft.nft.external_url.replace('ipfs://', 'https://gateway.pinata.cloud/ipfs/')}>External Link</a>\r\n                </div>\r\n                <div>\r\n                    <img \r\n                        style={{width: 150, height: 150}}\r\n                        src={nft.nft.image.replace('ipfs://', 'https://gateway.pinata.cloud/ipfs/')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <div style={{ display:'flex', flexDirection:'row', fontSize:`0.8em`, color: 'white' }}>\r\n                                <div style={{flex: 1}}>{'Content'}</div>\r\n                                <div style={{flex: 1}}>{'Attribute'}</div>\r\n                                <div style={{flex: 1}}>{'Percentile'}</div>\r\n                                <div style={{flex: 1}}>{'Rarity Score'}</div>\r\n                    </div>\r\n                    {nft.attributeRarities.map(x=>(\r\n                        <React.Fragment key={x.trait_type}>\r\n                            <div style={{ display:'flex', flexDirection:'row' }}>\r\n                                <div style={{flex: 1}}>{x.trait_type}</div>\r\n                                <div style={{flex: 1}}>\r\n                                    <span style={x.value !== \"[Missing]\"?{fontWeight:'bold'}:{}}>{x.value}</span>\r\n                                </div>\r\n                                <div style={{flex: 1, position:'relative'}}>\r\n                                    <div className='bar-background' style={{\r\n                                        position:'absolute',\r\n                                        zIndex: 0,\r\n                                        width: `${(100 * x.ratio).toFixed(0)}%`,\r\n                                        height: '100%',\r\n                                        }}>\r\n                                    </div>\r\n                                    <div style={{color:'#FFFFFF', position:'relative', zIndex: 10}}>\r\n                                        {`${(100 * x.ratio).toFixed(2)}%`}\r\n                                    </div>\r\n                                </div>\r\n                                <div style={{flex: 1}}>{`${x.ratioScore.toFixed(2)}`}</div>                                \r\n                            </div>\r\n                        </React.Fragment>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};","import React, { useEffect, useState } from 'react';\r\nimport { INftRarity } from '@crypto-dev-amigos/common';\r\nimport { NftCard } from './nft-card';\r\n\r\nexport const NftLoader = ({ nftUrl }:{ nftUrl:string })=>{\r\n\r\n    const [nft, setNft] = useState(null as null | INftRarity);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            console.log(nftUrl, {nftUrl});\r\n            const result = await fetch(nftUrl);\r\n            const obj = await result.json() as INftRarity;\r\n            setNft(obj);\r\n        })();\r\n    }, [nftUrl]);\r\n\r\n    return (\r\n        <>\r\n            {nft && <NftCard nft={nft}/>}\r\n        </>\r\n    );\r\n};","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './CssReset.css';\r\nimport './App.css';\r\nimport { NftCard } from './components/nft-card';\r\nimport { nftTestMetadata } from './components/nft-test-metadata';\r\nimport { NftLoader } from './components/nft-loader';\r\n\r\nfunction App() {\r\n\r\n  const route = window.location.pathname.split('/');\r\n  const projectName = route[1] ?? undefined;\r\n  const tokenId = route[2] ?? undefined;\r\n\r\n  console.log('route', {route, projectName, tokenId});\r\n\r\n  if(projectName && tokenId){\r\n    return (\r\n      <div className=\"App\">\r\n          <p>\r\n            <NftLoader nftUrl={`/data/${projectName}/${tokenId}.json`}/>\r\n          </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <p>\r\n          Empty 2\r\n        </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}