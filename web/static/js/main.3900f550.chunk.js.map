{"version":3,"sources":["helpers/delay.ts","components/lazy-component.tsx","helpers/urls.ts","components/nft-card.tsx","components/nft-loader.tsx","components/lazy-list.tsx","components/nft-project.tsx","components/nft-projects.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["delay","timeout","a","Promise","resolve","setTimeout","debug_timeStart","Date","now","globalRelayoutCallbacks","activeNotifyRelayoutId","notifyRelayout","notifyRelayoutId","i","length","callback","window","addEventListener","IntersectionObserver","observe","document","getElementsByTagName","LazyComponent","children","onLoad","placeholderRef","useRef","useState","shouldLoad","setShouldLoad","isDoneRef","useEffect","current","placeholder","iRelayout","push","divRect","getBoundingClientRect","screenBottom","scrollY","innerHeight","isOnScreen","top","console","log","time","unsub","ref","style","minWidth","minHeight","getProjectJsonUrl","projectKey","getNftJsonUrl","tokenId","getIpfsUrl","nftUrl","replace","NftCardPlaceholder","props","className","height","NftCard","nft","name","rarityScore","toFixed","href","external_url","alt","src","image","display","flexDirection","fontSize","color","flex","attributeRarities","map","x","Fragment","trait_type","value","fontWeight","position","zIndex","width","ratio","ratioScore","NftLoader","setNft","fetch","result","json","obj","LazyList","items","getItemKey","ItemComponent","loadCount","setLoadCount","lastLoadCount","itemsLoaded","slice","index","s","onLoaded","item","NftProjectLoader","projectRarity","setProjectRarity","nftProjectUrl","NftProject","tokens","onClick","location","NftProjectsLoader","projects","NftProjects","project","projectMetadata","NftProjectCard","external_link","App","route","pathname","split","undefined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3900f550.chunk.js","sourcesContent":["export async function delay(timeout: number): Promise<void> {\n    return await new Promise((resolve) => {\n        setTimeout(resolve, timeout);\n    });\n}","import React, { ReactNode, useEffect, useRef, useState } from 'react';\nimport { delay } from '../helpers/delay';\n\nconst debug_timeStart = Date.now();\nconst globalRelayoutCallbacks = [] as (null | (()=>boolean))[];\nlet activeNotifyRelayoutId = 0;\nconst notifyRelayout = async () => {\n    // Cancellable\n    activeNotifyRelayoutId++;\n    let notifyRelayoutId = activeNotifyRelayoutId;\n    await delay(100);\n    \n    let i = 0;\n    while( i < globalRelayoutCallbacks.length \n        && notifyRelayoutId === activeNotifyRelayoutId\n    ){\n        const callback = globalRelayoutCallbacks[i];\n        if(callback && callback()){\n            await delay(25);\n        }\n        i++;\n    }\n};\nwindow.addEventListener('scroll', notifyRelayout);\nwindow.addEventListener('load', ()=>{\n    const observer = new IntersectionObserver(notifyRelayout);\n    // Observe any element\n    observer.observe(document.getElementsByTagName('body')[0]);\n});\n\nexport const LazyComponent = ({ \n    children,\n    onLoad,\n}:{ \n    children: ReactNode,\n    onLoad?: () => void,\n })=>{\n\n    const placeholderRef = useRef(null as null | HTMLDivElement);\n    const [shouldLoad, setShouldLoad] = useState(false);\n    const isDoneRef = useRef(false);\n\n    useEffect(() => {\n        if( !placeholderRef.current ){ return; }\n        const placeholder = placeholderRef.current;\n      \n        const loadIfVisible = () => {\n            if( !placeholderRef.current ){ return false; }\n            if( isDoneRef.current ){return false;}\n\n            const divRect = placeholder.getBoundingClientRect();\n            const screenBottom = window.scrollY + window.innerHeight;\n            const isOnScreen = divRect.top < screenBottom;\n\n            if(!isOnScreen){ return false; }\n            console.log(`isOnScreen`,{ time: Date.now() - debug_timeStart, iRelayout, divRect, screenBottom, isOnScreen });\n            \n            isDoneRef.current = true;\n            unsub();\n            setShouldLoad(true);\n            notifyRelayout();\n            onLoad?.();\n\n            return true;\n        };\n\n        const iRelayout = globalRelayoutCallbacks.length;\n        globalRelayoutCallbacks.push(loadIfVisible);\n        const unsub = ()=>{\n            globalRelayoutCallbacks[iRelayout] = null;\n        };\n\n        return () => {\n            isDoneRef.current = true;\n            unsub();\n        };\n    },[]);\n\n    return (\n        <>  \n            {!shouldLoad && <div ref={placeholderRef} style={{minWidth: 300, minHeight: 300}}/>}\n            {shouldLoad && children}\n        </>\n    );\n};","export const getProjectsJsonUrl = ()=>`/data/projects.json`;\nexport const getProjectJsonUrl = (projectKey:string)=>`/data/${projectKey}/project.json`;\nexport const getNftJsonUrl = (projectKey:string, tokenId: string)=>`/data/${projectKey}/${tokenId}.json`;\nexport const getIpfsUrl = (nftUrl:string) => nftUrl.replace('ipfs://', 'https://gateway.pinata.cloud/ipfs/');\n","import React from 'react';\nimport { INftRarity } from '@crypto-dev-amigos/common';\nimport { LazyComponent } from './lazy-component';\nimport { getIpfsUrl } from '../helpers/urls';\n\nexport const NftCardPlaceholder = (props:{})=>{\n    return (\n        <>\n            <div className={'nft-card'}>\n                <div style={{height: 300}}>Loading...</div>\n            </div>\n        </>\n    );\n}\n\nexport const NftCard = ({nft}:{ nft: INftRarity }) => {\n\n    return (\n        <>\n            <div className={'nft-card'}>\n                {/* <div><b>Token ID:</b> {nft.nft.id}</div> */}\n                <div><b>{nft.nft.name}</b></div>\n                <div><b>Rarity Score:</b> {nft.rarityScore.toFixed(2)}</div>\n                <div>\n                    <a href={getIpfsUrl(nft.nft.external_url)}>External Link</a>\n                </div>\n\n                <div className={'nft-card-image'}>\n                    <LazyComponent>\n                        <img alt='nft' src={getIpfsUrl(nft.nft.image)}/>\n                    </LazyComponent>\n                </div>\n                <div>\n                    <div style={{ display:'flex', flexDirection:'row', fontSize:`0.8em`, color: 'white' }}>\n                                <div style={{flex: 1}}>{'Content'}</div>\n                                <div style={{flex: 1}}>{'Attribute'}</div>\n                                <div style={{flex: 1}}>{'Commonality'}</div>\n                                <div style={{flex: 1}}>{'Rarity Score'}</div>\n                    </div>\n                    {nft.attributeRarities.map(x=>(\n                        <React.Fragment key={x.trait_type}>\n                            <div style={{ display:'flex', flexDirection:'row' }}>\n                                <div style={{flex: 1}}>{x.trait_type}</div>\n                                <div style={{flex: 1}}>\n                                    <span style={x.value !== \"[Missing]\"?{fontWeight:'bold'}:{}}>{x.value}</span>\n                                </div>\n                                <div style={{flex: 1, position:'relative'}}>\n                                    <div className='bar-background' style={{\n                                        position:'absolute',\n                                        zIndex: 0,\n                                        width: `${(100 * x.ratio).toFixed(0)}%`,\n                                        height: '100%',\n                                        }}>\n                                    </div>\n                                    <div style={{color:'#FFFFFF', position:'relative', zIndex: 10}}>\n                                        {`${(100 * x.ratio).toFixed(2)}%`}\n                                    </div>\n                                </div>\n                                <div style={{flex: 1}}>{`${x.ratioScore.toFixed(2)}`}</div>                                \n                            </div>\n                        </React.Fragment>\n                    ))}\n                </div>\n            </div>\n        </>\n    );\n};\n\n","import React, { useEffect, useState } from 'react';\nimport { INftRarityDocument } from '@crypto-dev-amigos/common';\nimport { NftCard, NftCardPlaceholder } from './nft-card';\nimport { getNftJsonUrl } from '../helpers/urls';\n\nexport const NftLoader = ({ projectKey, tokenId }:{ projectKey:string, tokenId:string })=>{\n\n    const [nft, setNft] = useState(null as null | INftRarityDocument);\n\n    useEffect(() => {\n        (async () => {\n            const nftUrl = getNftJsonUrl(projectKey, tokenId);\n            console.log('NftLoader', {nftUrl});\n            const result = await fetch(nftUrl);\n            const obj = await result.json() as INftRarityDocument;\n            setNft(obj);\n        })();\n    }, [projectKey, tokenId]);\n\n    return (\n        <>\n            {!nft && <NftCardPlaceholder />}\n            {nft && <NftCard nft={nft}/>}\n        </>\n    );\n};","import React, { useRef } from 'react';\nimport { useState } from 'react';\nimport { LazyComponent } from './lazy-component';\n\nexport const LazyList = <T extends {}>({\n    items, \n    getItemKey, \n    ItemComponent \n}:{ \n    items:T[], \n    getItemKey:(item:T)=>string, \n    ItemComponent: (props:{item:T}) => JSX.Element,\n})=>{\n\n    const PAGE_SIZE = 12;\n    const NEAR_END_COUNT = 3;\n    const [loadCount, setLoadCount] = useState(PAGE_SIZE);\n    const lastLoadCount = useRef(PAGE_SIZE);\n    lastLoadCount.current = loadCount;\n\n    const onLoaded = (index:number)=>{\n        // Skip if already loaded more\n        if(lastLoadCount.current !== loadCount){ return; }\n\n        // Skip if not near the end\n        if(index + NEAR_END_COUNT < loadCount){ return; }\n\n        // Load more\n        console.log('# LazyList: loadMore', {loadCount});\n        setLoadCount(s=> s + PAGE_SIZE);\n    }\n\n    const itemsLoaded = items.slice(0, loadCount);\n\n    return (\n        <>\n            {itemsLoaded.map((x,index)=>(\n                <LazyComponent key={getItemKey(x)} onLoad={() => onLoaded(index)}>\n                    <ItemComponent item={x}/>\n                </LazyComponent>\n            ))}\n        </>\n    );\n};\n\n","import React, { useEffect, useState } from 'react';\nimport { INftProjectRarityDocument, INftRarity } from '@crypto-dev-amigos/common';\nimport { NftCard } from './nft-card';\nimport { LazyList } from './lazy-list';\nimport { NftLoader } from './nft-loader';\nimport { getNftJsonUrl, getProjectJsonUrl } from '../helpers/urls';\n\nexport const NftProjectLoader = ({ projectKey }:{ projectKey:string })=>{\n\n    const [projectRarity, setProjectRarity] = useState(null as null | INftProjectRarityDocument);\n\n    useEffect(() => {\n        (async () => {\n            const nftProjectUrl = getProjectJsonUrl(projectKey);\n            // console.log('projectKey', { projectKey, nftProjectUrl });\n            const result = await fetch(nftProjectUrl);\n            const obj = await result.json() as INftProjectRarityDocument;\n            setProjectRarity(obj);\n        })();\n    }, [projectKey]);\n\nreturn (\n    <>\n        {projectRarity && <NftProject projectKey={projectKey} projectRarity={projectRarity} />}\n    </>\n);\n};\n\nexport const NftProject = ({ projectKey, projectRarity }:{ projectKey:string, projectRarity:INftProjectRarityDocument}) => {\n    return (\n        <>\n            <div className='nft-list'>\n                {projectRarity && (\n                    <LazyList items={projectRarity.tokens} getItemKey={x=>`${x.tokenId}`} ItemComponent={({item})=>(\n                        <div onClick={()=>window.location.href=`${projectKey}/${item.tokenId}`}>\n                            <NftLoader projectKey={projectKey} tokenId={`${item.tokenId}`} />\n                        </div>\n                    )}/>\n                )}\n            </div>\n        </>\n    );\n};","import React, { useEffect, useState } from 'react';\nimport { INftProjectMetadata, INftProjectsDocument } from '@crypto-dev-amigos/common';\nimport { LazyList } from './lazy-list';\nimport { NftLoader } from './nft-loader';\nimport { getIpfsUrl, getProjectsJsonUrl } from '../helpers/urls';\nimport { LazyComponent } from './lazy-component';\n\nexport const NftProjectsLoader = (props:{ })=>{\n\n    const [projects, setProjectRarity] = useState(null as null | INftProjectsDocument);\n\n    useEffect(() => {\n        (async () => {\n            const nftProjectUrl = getProjectsJsonUrl();\n            // console.log('projectKey', { projectKey, nftProjectUrl });\n            const result = await fetch(nftProjectUrl);\n            const obj = await result.json() as INftProjectsDocument;\n            setProjectRarity(obj);\n        })();\n    }, []);\n\nreturn (\n    <>\n        {projects && <NftProjects projects={projects} />}\n    </>\n);\n};\n\nexport const NftProjects = ({ projects }:{ projects: INftProjectsDocument }) => {\n    return (\n        <>\n            <div className='nft-list'>\n                {projects && (\n                    <LazyList items={projects.projects} getItemKey={x=>`${x.projectKey}`} ItemComponent={({item})=>(\n                        <NftProjectCard projectKey={item.projectKey} project={item.projectMetadata} />\n                    )}/>\n                )}\n            </div>\n        </>\n    );\n};\n\n\nexport const NftProjectCard = ({projectKey, project}:{ projectKey:string, project: INftProjectMetadata }) => {\n\n    return (\n        <>\n            <div className={'nft-card'}>\n                {/* <div><b>Token ID:</b> {nft.nft.id}</div> */}\n                <div><b>{project.name}</b></div>\n                <div>\n                    <a href={getIpfsUrl(project.external_link)}>External Link</a>\n                </div>\n\n                <div className={'nft-card-image'} onClick={()=>window.location.href=`${projectKey}`}>\n                    <LazyComponent>\n                        <img alt='nft' src={getIpfsUrl(project.image)}/>\n                    </LazyComponent>\n                </div>\n            </div>\n        </>\n    );\n};\n\n","import React from 'react';\nimport './CssReset.css';\nimport './App.css';\nimport { NftLoader } from './components/nft-loader';\nimport { NftProjectLoader } from './components/nft-project';\nimport { NftProjectsLoader } from './components/nft-projects';\n\nfunction App() {\n\n  const route = window.location.pathname.split('/');\n  const projectKey = route[1] ?? undefined;\n  const tokenId = route[2] ?? undefined;\n\n  console.log('route', {route, projectKey, tokenId});\n\n  if(projectKey && tokenId){\n    return (\n      <div className=\"App\">\n        <div className='nft-container-single'>\n          <NftLoader projectKey={projectKey} tokenId={tokenId}/>\n        </div>\n      </div>\n    );\n  }\n\n  if(projectKey){\n    return (\n      <div className=\"App\">\n        <NftProjectLoader projectKey={projectKey}/>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n        <NftProjectsLoader/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}