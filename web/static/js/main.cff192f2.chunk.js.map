{"version":3,"sources":["helpers/delay.ts","components/lazy-component.tsx","helpers/urls.ts","components/bar-graph.tsx","components/nft-card.tsx","helpers/open-sea.ts","components/nft-loader.tsx","components/lazy-list.tsx","components/nft-project.tsx","components/nft-projects.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["delay","timeout","a","Promise","resolve","setTimeout","globalRelayoutCallbacks","Date","now","activeNotifyRelayoutId","notifyRelayout","notifyRelayoutId","i","length","callback","window","addEventListener","IntersectionObserver","observe","document","getElementsByTagName","nextLazyComponentId","LazyComponent","children","onLoad","placeholderRef","useRef","useState","shouldLoad","setShouldLoad","isDoneRef","useEffect","current","placeholder","iRelayout","push","divRect","getBoundingClientRect","screenBottom","scrollY","innerHeight","top","unsub","ref","style","minWidth","minHeight","getProjectJsonUrl","projectKey","getNftJsonUrl","tokenId","getIpfsUrl","nftUrl","replace","BarGraphCell","ratio","text","position","className","zIndex","width","toFixed","height","color","formatPrice","x","price","symbol","priceUsd","NftCardPlaceholder","props","NftCard","nft","name","rarityScore","listing","lastSell","href","external_url","openSeaLink","alt","src","image","display","flexDirection","fontSize","flex","attributeRarities","map","Fragment","trait_type","value","fontWeight","ratioScore","getOpenSeaData","contractAddress","openSeaUrl","fetch","result","json","NftLoader","setNft","obj","nftProjectUrl","project","contract","openSeaData","lastSellPrice","parseFloat","last_sale","total_price","Math","pow","payment_token","decimals","lastSellSymbol","lastSellPriceUsd","usd_price","order","orders","listingPrice","current_price","payment_token_contract","listingSymbol","listingPriceUsd","undefined","permalink","LazyList","items","getItemKey","ItemComponent","loadCount","setLoadCount","lastLoadCount","itemsLoaded","slice","index","s","onLoaded","item","NftProjectLoader","projectRarity","setProjectRarity","loaded","loadProjectRarityData","ALL_TRAIT_VALUE","doc","traitTypes","Set","tokenLookups","forEach","traitType","traitTypeTokenLookups","filter","includedTokenIds","flatMap","tokenIds","missingTokenIds","tokenIdsByRank","t","has","unshift","trait_value","NftProject","setTokenIds","nftListRef","traitFilters","selected","onSelect","args","tokenIdsSelected","Object","entries","traitKey","traitValue","tokenLookup","find","v","onClick","location","TraitTypesList","TraitValuesList","tokens","NftProjectsLoader","projects","NftProjects","projectMetadata","NftProjectCard","external_link","App","route","pathname","split","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cff192f2.chunk.js","sourcesContent":["export async function delay(timeout: number): Promise<void> {\n    return await new Promise((resolve) => {\n        setTimeout(resolve, timeout);\n    });\n}","import React, { ReactNode, useEffect, useRef, useState } from 'react';\nimport { delay } from '../helpers/delay';\n\nconst debug_timeStart = Date.now();\nconst globalRelayoutCallbacks = [] as (null | (()=>boolean))[];\nlet activeNotifyRelayoutId = 0;\nconst notifyRelayout = async () => {\n\n    // Cancellable\n    activeNotifyRelayoutId++;\n    let notifyRelayoutId = activeNotifyRelayoutId;\n    await delay(100);\n\n    // console.log('LazyComponent notifyRelayout', {notifyRelayoutId});\n    \n    let i = 0;\n    while(i < globalRelayoutCallbacks.length){\n        const callback = globalRelayoutCallbacks[i];\n        if(callback && callback()){\n            await delay(25);\n        }\n        i++;\n\n        if(notifyRelayoutId !== activeNotifyRelayoutId){\n            // Cancelled\n            // console.log('LazyComponent notifyRelayout - Cancelled', {notifyRelayoutId});\n            return;\n        }\n    }\n};\nwindow.addEventListener('scroll', notifyRelayout);\nwindow.addEventListener('load', ()=>{\n    const observer = new IntersectionObserver(notifyRelayout);\n    // Observe any element\n    observer.observe(document.getElementsByTagName('body')[0]);\n});\n\nlet nextLazyComponentId = 0;\n\nexport const LazyComponent = ({ \n    children,\n    onLoad,\n}:{ \n    children: ReactNode,\n    onLoad?: () => void,\n })=>{\n\n    const placeholderRef = useRef(null as null | HTMLDivElement);\n    const [shouldLoad, setShouldLoad] = useState(false);\n    const isDoneRef = useRef(false);\n    const lazyComponentId = useRef(nextLazyComponentId++);\n\n    useEffect(() => {\n        // console.log('LazyComponent useEffect', {lazyComponentId});\n\n        if( !placeholderRef.current ){ \n            // console.log('LazyComponent useEffect - SKIP placeholderRef is missing', {lazyComponentId});\n            return; \n        }\n        const placeholder = placeholderRef.current;\n        isDoneRef.current = false;\n      \n        const loadIfVisible = () => {\n            // console.log('LazyComponent useEffect:loadIfVisible', {lazyComponentId});\n\n            if( !placeholderRef.current ){ \n                // console.log('LazyComponent useEffect:loadIfVisible - SKIP placeholderRef is missing', {lazyComponentId});\n                return false; \n            }\n            if( isDoneRef.current ){ \n                // console.log('LazyComponent useEffect:loadIfVisible - SKIP isDone', {lazyComponentId});\n                return false; \n            }\n\n            const divRect = placeholder.getBoundingClientRect();\n            const screenBottom = window.scrollY + window.innerHeight;\n            const isOnScreen = divRect.top < screenBottom;\n\n            if(!isOnScreen){ return false; }\n            // console.log(`isOnScreen`,{ time: Date.now() - debug_timeStart, iRelayout, divRect, screenBottom, isOnScreen });\n            \n            isDoneRef.current = true;\n            unsub();\n            setShouldLoad(true);\n            notifyRelayout();\n            onLoad?.();\n\n            return true;\n        };\n\n        const iRelayout = globalRelayoutCallbacks.length;\n        globalRelayoutCallbacks.push(loadIfVisible);\n        const unsub = ()=>{\n            globalRelayoutCallbacks[iRelayout] = null;\n        };\n\n        notifyRelayout();\n\n        return () => {\n            isDoneRef.current = true;\n            unsub();\n        };\n    },[children, onLoad]);\n\n    // console.log('LazyComponent RENDER', {lazyComponentId});\n    return (\n        <>  \n            {!shouldLoad && <div ref={placeholderRef} style={{minWidth: 300, minHeight: 300}}/>}\n            {shouldLoad && children}\n        </>\n    );\n};","export const getProjectsJsonUrl = ()=>`/data/projects.json`;\nexport const getProjectJsonUrl = (projectKey:string)=>`/data/${projectKey}/project.json`;\nexport const getNftJsonUrl = (projectKey:string, tokenId: string)=>`/data/${projectKey}/${tokenId}.json`;\nexport const getIpfsUrl = (nftUrl:string) => nftUrl.replace('ipfs://', 'https://gateway.pinata.cloud/ipfs/');\n","import React, { useRef } from 'react';\r\n\r\nexport const BarGraphCell = ({ ratio, text }:{ ratio: number, text?: string })=>{\r\n    return (\r\n        <div style={{position:'relative'}}>\r\n            <div className='bar-background' style={{\r\n                position:'absolute',\r\n                zIndex: 0,\r\n                width: `${(100 * ratio).toFixed(0)}%`,\r\n                height: '100%',\r\n                }}>\r\n            </div>\r\n            <div style={{color:'#FFFFFF', position:'relative', zIndex: 10}}>\r\n                {text ?? `${(100 * ratio).toFixed(2)}%`}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport { INftRarity } from '@crypto-dev-amigos/common';\nimport { LazyComponent } from './lazy-component';\nimport { getIpfsUrl } from '../helpers/urls';\nimport { BarGraphCell } from './bar-graph';\n\nexport type INftRarityWithExtra = INftRarity & {\n    openSeaLink?: string;\n    lastSell?: {\n        price: number;\n        symbol?: string;\n        priceUsd?: number;\n    },\n    listing?: {\n        price: number;\n        symbol?: string;\n        priceUsd?: number;\n    },\n};\n\nconst formatPrice = (x?: {\n    price: number;\n    symbol?: string;\n    priceUsd?: number;\n}) => x ? `${x.price.toFixed(3)}${x.symbol??''}${x.priceUsd ? ` $${x.priceUsd.toFixed(2)}`:''}` : ' -?- '\n\nexport const NftCardPlaceholder = (props:{})=>{\n    return (\n        <>\n            <div className={'nft-card'}>\n                <div style={{height: 300}}>Loading...</div>\n            </div>\n        </>\n    );\n}\n\nexport const NftCard = ({nft}:{ nft: INftRarityWithExtra }) => {\n\n    return (\n        <>\n            <div className={'nft-card'}>\n                {/* <div><b>Token ID:</b> {nft.nft.id}</div> */}\n                <div><b>{nft.nft.name}</b></div>\n                <div><b>Rarity Score:</b> {nft.rarityScore.toFixed(2)}</div>\n                <div><b>Listing:</b> {formatPrice(nft.listing)}</div>\n                <div><b>Last Sell:</b> {formatPrice(nft.lastSell)}</div>\n                <div>\n                    <a href={getIpfsUrl(nft.nft.external_url)}>External Link</a>\n                </div>\n                <div>\n                    {!!nft.openSeaLink && <a href={nft.openSeaLink}>Open Sea</a>}\n                    {!nft.openSeaLink && <span>Open Sea - Not Found</span>}\n                </div>\n\n                <div className={'nft-card-image'}>\n                    <LazyComponent>\n                        <img alt='nft' src={getIpfsUrl(nft.nft.image)}/>\n                    </LazyComponent>\n                </div>\n                <div>\n                    <div style={{ display:'flex', flexDirection:'row', fontSize:`0.8em`, color: 'white' }}>\n                                <div style={{flex: 1}}>{'Content'}</div>\n                                <div style={{flex: 1}}>{'Attribute'}</div>\n                                <div style={{flex: 1}}>{'Commonality'}</div>\n                                <div style={{flex: 1}}>{'Rarity Score'}</div>\n                    </div>\n                    {nft.attributeRarities.map(x=>(\n                        <React.Fragment key={x.trait_type}>\n                            <div style={{ display:'flex', flexDirection:'row' }}>\n                                <div style={{flex: 1}}>{x.trait_type}</div>\n                                <div style={{flex: 1}}>\n                                    <span style={x.value !== \"[Missing]\"?{fontWeight:'bold'}:{}}>{x.value}</span>\n                                </div>\n                                <div style={{flex: 1}}>\n                                    <BarGraphCell ratio={x.ratio} />\n                                </div>\n                                <div style={{flex: 1}}>{`${x.ratioScore.toFixed(2)}`}</div>                                \n                            </div>\n                        </React.Fragment>\n                    ))}\n                </div>\n            </div>\n        </>\n    );\n};\n\n","export const getOpenSeaData = async ({contractAddress, tokenId}: {contractAddress:string, tokenId:string})=>{\r\n\r\n    const openSeaUrl = `https://api.opensea.io/api/v1/asset/${contractAddress}/${tokenId}/`;\r\n    const result = await fetch(openSeaUrl);\r\n    const json = await result.json() as {\r\n        token_id: string,\r\n        num_sales?: number,    \r\n        last_sale?: {\r\n            /** BigNumber */\r\n            total_price: string,\r\n            payment_token: {\r\n                symbol: string,\r\n                decimals: number,\r\n                usd_price: string,\r\n            },\r\n        },\r\n        orders?: {\r\n            current_price: string,\r\n            payment_token_contract: {\r\n                symbol: string,\r\n                decimals: number,\r\n                usd_price: string,\r\n            },\r\n        }[],\r\n        /** Open sea link */\r\n        permalink:string,\r\n    };\r\n\r\n    return json;\r\n};\r\n\r\n/** Example Order:\r\n * \r\n * \r\n */\r\nconst exampleOrder = {\r\n    \"created_date\": \"2021-09-16T20:23:50.536372\",\r\n    \"closing_date\": null,\r\n    \"closing_extendable\": false,\r\n    \"expiration_time\": 0,\r\n    \"listing_time\": 1631823727,\r\n    \"order_hash\": \"0xbf2f687150ee6444c3a63a8f0fd4c18f65a23ca7efb079f83d91c3572e44ce68\",\r\n    \"metadata\": {\r\n        \"asset\": {\r\n            \"id\": \"4\",\r\n            \"address\": \"0x5537d90a4a2dc9d9b37bab49b490cf67d4c54e91\"\r\n        },\r\n        \"schema\": \"ERC721\"\r\n    },\r\n    \"exchange\": \"0x7be8076f4ea4a4ad08075c2508e481d6c946d12b\",\r\n    \"maker\": {\r\n        \"user\": {\r\n            \"username\": \"IP20000\"\r\n        },\r\n        \"profile_img_url\": \"https://storage.googleapis.com/opensea-static/opensea-profile/2.png\",\r\n        \"address\": \"0x351a8d846a01dbd783537df2aae850cf2919abe5\",\r\n        \"config\": \"\"\r\n    },\r\n    \"taker\": {\r\n        \"user\": {\r\n            \"username\": \"NullAddress\"\r\n        },\r\n        \"profile_img_url\": \"https://storage.googleapis.com/opensea-static/opensea-profile/1.png\",\r\n        \"address\": \"0x0000000000000000000000000000000000000000\",\r\n        \"config\": \"\"\r\n    },\r\n    \"current_price\": \"150000000000000000\",\r\n    \"current_bounty\": \"1500000000000000\",\r\n    \"bounty_multiple\": \"0.01\",\r\n    \"maker_relayer_fee\": \"750\",\r\n    \"taker_relayer_fee\": \"0\",\r\n    \"maker_protocol_fee\": \"0\",\r\n    \"taker_protocol_fee\": \"0\",\r\n    \"maker_referrer_fee\": \"0\",\r\n    \"fee_recipient\": {\r\n        \"user\": {\r\n            \"username\": \"OS-Wallet\"\r\n        },\r\n        \"profile_img_url\": \"https://storage.googleapis.com/opensea-static/opensea-profile/28.png\",\r\n        \"address\": \"0x5b3256965e7c3cf26e11fcaf296dfc8807c01073\",\r\n        \"config\": \"verified\"\r\n    },\r\n    \"fee_method\": 1,\r\n    \"side\": 1,\r\n    \"sale_kind\": 0,\r\n    \"target\": \"0x5537d90a4a2dc9d9b37bab49b490cf67d4c54e91\",\r\n    \"how_to_call\": 0,\r\n    \"calldata\": \"0x23b872dd000000000000000000000000351a8d846a01dbd783537df2aae850cf2919abe500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004\",\r\n    \"replacement_pattern\": \"0x000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000000000000000\",\r\n    \"static_target\": \"0x0000000000000000000000000000000000000000\",\r\n    \"static_extradata\": \"0x\",\r\n    \"payment_token\": \"0x0000000000000000000000000000000000000000\",\r\n    \"payment_token_contract\": {\r\n        \"id\": 1,\r\n        \"symbol\": \"ETH\",\r\n        \"address\": \"0x0000000000000000000000000000000000000000\",\r\n        \"image_url\": \"https://storage.opensea.io/files/6f8e2979d428180222796ff4a33ab929.svg\",\r\n        \"name\": \"Ether\",\r\n        \"decimals\": 18,\r\n        \"eth_price\": \"1.000000000000000\",\r\n        \"usd_price\": \"3026.789999999999964000\"\r\n    },\r\n    \"base_price\": \"150000000000000000\",\r\n    \"extra\": \"0\",\r\n    \"quantity\": \"1\",\r\n    \"salt\": \"9705624739486272129529506929616367068676233907983681506014294982163780059829\",\r\n    \"v\": 28,\r\n    \"r\": \"0xff39941c66195b61595e46d980bd2d63e7f563befacdf5946a15594897be6c17\",\r\n    \"s\": \"0x3110ba9fa6dba3bc7292a3faec4d0225722dc02a111c83e9a14f24c78e2d2a9a\",\r\n    \"approved_on_chain\": false,\r\n    \"cancelled\": false,\r\n    \"finalized\": false,\r\n    \"marked_invalid\": false,\r\n    \"prefixed_hash\": \"0xd24bdb201fc29d52a4bef10a9a075d63e4075313def340236e3e7c888eda02ce\"\r\n};","import React, { useEffect, useState } from 'react';\nimport { INftProjectRarityDocument, INftRarityDocument } from '@crypto-dev-amigos/common';\nimport { INftRarityWithExtra, NftCard, NftCardPlaceholder } from './nft-card';\nimport { getNftJsonUrl, getProjectJsonUrl } from '../helpers/urls';\nimport { getOpenSeaData } from '../helpers/open-sea';\n\nexport const NftLoader = ({ projectKey, tokenId, contractAddress }:{ projectKey: string, tokenId: string, contractAddress?: string })=>{\n\n    const [nft, setNft] = useState(null as null | INftRarityWithExtra);\n\n    useEffect(() => {\n        (async () => {\n            const nftUrl = getNftJsonUrl(projectKey, tokenId);\n            // console.log('NftLoader', {nftUrl});\n            const result = await fetch(nftUrl);\n            const obj = await result.json() as INftRarityDocument;\n            setNft(obj);\n\n            // Try to get contractAddress from project data\n            if(!contractAddress){\n                // Load from project\n                const nftProjectUrl = getProjectJsonUrl(projectKey);\n                // console.log('projectKey', { projectKey, nftProjectUrl });\n                const result = await fetch(nftProjectUrl);\n                const obj = await result.json() as INftProjectRarityDocument;\n                contractAddress = obj.project.contract;\n\n                if(!contractAddress){ return; }\n            }\n\n            // Load open sea data\n            const openSeaData = await getOpenSeaData({ contractAddress, tokenId });\n            const lastSellPrice = parseFloat(openSeaData.last_sale?.total_price ?? '0') / Math.pow(10, openSeaData.last_sale?.payment_token.decimals ?? 0);\n            const lastSellSymbol = openSeaData.last_sale?.payment_token.symbol;\n            const lastSellPriceUsd = lastSellPrice * parseFloat(openSeaData.last_sale?.payment_token.usd_price ?? '1');\n\n            const order = openSeaData.orders?.[0];\n            const listingPrice = parseFloat(order?.current_price ?? '0') / Math.pow(10, order?.payment_token_contract.decimals ?? 0);\n            const listingSymbol =order?.payment_token_contract.symbol;\n            const listingPriceUsd = listingPrice * parseFloat(order?.payment_token_contract.usd_price ?? '1');\n\n            setNft({\n                ...obj, \n                lastSell: openSeaData.last_sale ? {\n                    price: lastSellPrice, \n                    symbol: lastSellSymbol, \n                    priceUsd : lastSellPriceUsd,\n                } : undefined,\n                listing: order ? {\n                    price: listingPrice, \n                    symbol: listingSymbol, \n                    priceUsd : listingPriceUsd,\n                } : undefined,\n                openSeaLink: openSeaData.permalink,\n            })\n\n        })();\n    }, [projectKey, tokenId]);\n\n    // console.log('NftLoader RENDER', {projectKey, tokenId});\n    return (\n        <>\n            {!nft && <NftCardPlaceholder />}\n            {nft && <NftCard nft={nft}/>}\n        </>\n    );\n};\n\n","import React, { useRef } from 'react';\nimport { useState } from 'react';\nimport { LazyComponent } from './lazy-component';\n\nexport const LazyList = <T extends {}>({\n    items, \n    getItemKey, \n    ItemComponent \n}:{ \n    items:T[], \n    getItemKey:(item:T)=>string, \n    ItemComponent: (props:{item:T}) => JSX.Element,\n})=>{\n\n    const PAGE_SIZE = 12;\n    const NEAR_END_COUNT = 3;\n    const [loadCount, setLoadCount] = useState(PAGE_SIZE);\n    const lastLoadCount = useRef(PAGE_SIZE);\n    lastLoadCount.current = loadCount;\n\n    const onLoaded = (index:number)=>{\n        // Skip if already loaded more\n        if(lastLoadCount.current !== loadCount){ return; }\n\n        // Skip if not near the end\n        if(index + NEAR_END_COUNT < loadCount){ return; }\n\n        // Load more\n        // console.log('# LazyList: loadMore', {loadCount});\n        setLoadCount(s=> s + PAGE_SIZE);\n    }\n\n    const itemsLoaded = items.slice(0, loadCount);\n\n    \n    // console.log('LazyList RENDER', {itemsLength: items.length, loadedLength: itemsLoaded.length});\n    return (\n        <>\n            {itemsLoaded.map((x,index)=>(\n                <React.Fragment key={getItemKey(x)} >\n                    <LazyComponent onLoad={() => onLoaded(index)}>\n                        <ItemComponent item={x}/>\n                    </LazyComponent>\n                </React.Fragment>\n            ))}\n        </>\n    );\n};\n\n","import React, { useEffect, useRef, useState } from 'react';\nimport type { INftProjectRarityDocument, INftRarity, MISSING_ATTRIBUTE_VALUE as MISSING_ATTRIBUTE_VALUE_TYPE } from '@crypto-dev-amigos/common';\nimport { NftCard } from './nft-card';\nimport { LazyList } from './lazy-list';\nimport { NftLoader } from './nft-loader';\nimport { getNftJsonUrl, getProjectJsonUrl } from '../helpers/urls';\nimport { BarGraphCell } from './bar-graph';\n\n// Workaround for importing implementation\nconst MISSING_ATTRIBUTE_VALUE: typeof MISSING_ATTRIBUTE_VALUE_TYPE = `[Missing]`;\n\nexport const NftProjectLoader = ({ projectKey }:{ projectKey:string })=>{\n\n    const [projectRarity, setProjectRarity] = useState(null as null | INftProjectRarityData);\n\n    useEffect(() => {\n        (async () => {\n            const nftProjectUrl = getProjectJsonUrl(projectKey);\n            // console.log('projectKey', { projectKey, nftProjectUrl });\n            const result = await fetch(nftProjectUrl);\n            const obj = await result.json() as INftProjectRarityDocument;\n\n            const loaded = loadProjectRarityData(obj);\n\n            setProjectRarity(loaded);\n        })();\n    }, [projectKey]);\n\nreturn (\n    <>\n        {projectRarity && <NftProject projectKey={projectKey} projectRarity={projectRarity} />}\n    </>\n);\n};\n\nconst ALL_TRAIT_VALUE ='[All]';\ntype INftProjectRarityData = {\n    tokenIdsByRank: INftProjectRarityDocument['tokenIdsByRank']\n    tokenLookups: (INftProjectRarityDocument['tokenLookups'][number] & {\n        ratio: number;\n    })[],\n    traitTypes: string[];\n    contractAddress?: string;\n};\nconst loadProjectRarityData = (doc: INftProjectRarityDocument): INftProjectRarityData => {\n    const traitTypes = [...new Set(doc.tokenLookups.map(x=>x.trait_type))];\n\n    // Add [Missing] and [All]\n    traitTypes.forEach(traitType => {\n        const traitTypeTokenLookups = doc.tokenLookups\n            .filter(x=>x.trait_type === traitType);\n        const includedTokenIds = new Set(traitTypeTokenLookups.flatMap(x=>x.tokenIds));\n        const missingTokenIds = doc.tokenIdsByRank.filter(t => !includedTokenIds.has(t));\n        // Missing\n        if(missingTokenIds.length){\n            doc.tokenLookups.unshift({\n                trait_type: traitType,\n                trait_value: MISSING_ATTRIBUTE_VALUE,\n                tokenIds: missingTokenIds\n            });\n        }\n\n        // All\n        doc.tokenLookups.unshift({\n            trait_type: traitType,\n            trait_value: ALL_TRAIT_VALUE,\n            tokenIds: doc.tokenIdsByRank,\n        });\n    });\n\n    return {\n        contractAddress: doc.project.contract,\n        tokenIdsByRank: doc.tokenIdsByRank,\n        tokenLookups: doc.tokenLookups.map(x=>({\n            ...x,\n            ratio: x.tokenIds.length / doc.tokenIdsByRank.length,\n        })),\n        traitTypes,\n    };\n};\n\ntype TraitFilters = { [traitType: string]: string };\nexport const NftProject = ({ projectKey, projectRarity }:{ projectKey:string, projectRarity:INftProjectRarityData}) => {\n\n    const [tokenIds, setTokenIds] = useState(projectRarity.tokenIdsByRank);\n    const nftListRef = useRef(null as null | HTMLDivElement)\n    const traitFilters = useRef({} as TraitFilters);\n\n    const onSelect = (args: { traitType: string, value: string }) => {\n        traitFilters.current[args.traitType] = args.value;\n        let tokenIdsSelected = new Set(projectRarity.tokenIdsByRank);\n        Object.entries(traitFilters.current).forEach(([traitKey,traitValue])=>{\n            const tokenLookup = projectRarity.tokenLookups.find(v => v.trait_type === traitKey && v.trait_value === traitValue);\n            if(!tokenLookup){ return; }\n\n            tokenIdsSelected = new Set(tokenLookup.tokenIds.filter(t => tokenIdsSelected.has(t) ));\n        });\n        setTokenIds([...tokenIdsSelected]);\n        // nftListRef.current?.scrollIntoView({behavior:'smooth'});\n    };\n\n    return (\n        <>\n            <div>\n                <TraitTypesList projectRarity={projectRarity} selected={traitFilters.current} onSelect={onSelect}/>\n            </div>\n            <div className='nft-list' ref={nftListRef}>\n                {projectRarity && (\n                    <LazyList items={tokenIds} getItemKey={x=>`${x}`} ItemComponent={({item})=>(\n                        <div onClick={()=>window.location.href=`${projectKey}/${item}`}>\n                            <NftLoader projectKey={projectKey} tokenId={`${item}`} contractAddress={projectRarity.contractAddress} />\n                        </div>\n                    )}/>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport const TraitTypesList = ({ projectRarity, selected, onSelect }:{ projectRarity:INftProjectRarityData, selected:TraitFilters, onSelect: (args:{ traitType: string, value: string, tokens: number[] })=>void })=>{\n    return (\n        <div className='nft-trait-types'>\n            {projectRarity.traitTypes.map(x=>(\n                <React.Fragment key={x}>\n                    <TraitValuesList traitType={x} projectRarity={projectRarity} selected={selected} onSelect={onSelect} />\n                </React.Fragment>\n            ))}\n        </div>\n    );\n};\n\nexport const TraitValuesList = ({ traitType, projectRarity, selected, onSelect }:{ traitType: string, projectRarity:INftProjectRarityData, selected:TraitFilters, onSelect: (args:{ traitType: string, value: string, tokens: number[] })=>void })=>{\n   \n    const traitTypeTokenLookups = projectRarity.tokenLookups\n        .filter(x=>x.trait_type === traitType);\n   \n    return (\n        <div className='nft-trait-type'>\n            <div className='nft-trait-type-header'>\n                {traitType}\n            </div>\n            <div className='nft-trait-values'>\n                {traitTypeTokenLookups.map(x=>(\n                    <React.Fragment key={`${x.trait_type}:${x.trait_value}`}>\n                        <div className={`nft-trait-value ${(selected[x.trait_type]??ALL_TRAIT_VALUE)===x.trait_value ? 'nft-trait-value-selected':''}`} onClick={()=>onSelect({traitType: x.trait_type, value: x.trait_value, tokens: x.tokenIds})}>\n                            <BarGraphCell ratio={x.ratio} text={x.trait_value}/>\n                        </div>\n                    </React.Fragment>\n                ))}\n            </div>\n        </div>\n    );\n};\n\n","import React, { useEffect, useState } from 'react';\nimport { INftProjectMetadata, INftProjectsDocument } from '@crypto-dev-amigos/common';\nimport { LazyList } from './lazy-list';\nimport { NftLoader } from './nft-loader';\nimport { getIpfsUrl, getProjectsJsonUrl } from '../helpers/urls';\nimport { LazyComponent } from './lazy-component';\n\nexport const NftProjectsLoader = (props:{ })=>{\n\n    const [projects, setProjectRarity] = useState(null as null | INftProjectsDocument);\n\n    useEffect(() => {\n        (async () => {\n            const nftProjectUrl = getProjectsJsonUrl();\n            // console.log('projectKey', { projectKey, nftProjectUrl });\n            const result = await fetch(nftProjectUrl);\n            const obj = await result.json() as INftProjectsDocument;\n            setProjectRarity(obj);\n        })();\n    }, []);\n\nreturn (\n    <>\n        {projects && <NftProjects projects={projects} />}\n    </>\n);\n};\n\nexport const NftProjects = ({ projects }:{ projects: INftProjectsDocument }) => {\n    return (\n        <>\n            <div className='nft-list'>\n                {projects && (\n                    <LazyList items={projects.projects} getItemKey={x=>`${x.projectKey}`} ItemComponent={({item})=>(\n                        <NftProjectCard projectKey={item.projectKey} project={item.projectMetadata} />\n                    )}/>\n                )}\n            </div>\n        </>\n    );\n};\n\n\nexport const NftProjectCard = ({projectKey, project}:{ projectKey:string, project: INftProjectMetadata }) => {\n\n    return (\n        <>\n            <div className={'nft-card'}>\n                {/* <div><b>Token ID:</b> {nft.nft.id}</div> */}\n                <div><b>{project.name}</b></div>\n                <div>\n                    <a href={getIpfsUrl(project.external_link)}>External Link</a>\n                </div>\n\n                <div className={'nft-card-image'} onClick={()=>window.location.href=`${projectKey}`}>\n                    <LazyComponent>\n                        <img alt='nft' src={getIpfsUrl(project.image)}/>\n                    </LazyComponent>\n                </div>\n            </div>\n        </>\n    );\n};\n\n","import React from 'react';\nimport './CssReset.css';\nimport './App.css';\nimport { NftLoader } from './components/nft-loader';\nimport { NftProjectLoader } from './components/nft-project';\nimport { NftProjectsLoader } from './components/nft-projects';\n\nfunction App() {\n\n  const route = window.location.pathname.split('/');\n  const projectKey = route[1] ?? undefined;\n  const tokenId = route[2] ?? undefined;\n\n  console.log('route', {route, projectKey, tokenId});\n\n  if(projectKey && tokenId){\n    return (\n      <div className=\"App\">\n        <div className='nft-container-single'>\n          <NftLoader projectKey={projectKey} tokenId={tokenId}/>\n        </div>\n      </div>\n    );\n  }\n\n  if(projectKey){\n    return (\n      <div className=\"App\">\n        <NftProjectLoader projectKey={projectKey}/>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n        <NftProjectsLoader/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}