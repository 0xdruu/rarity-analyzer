{"version":3,"sources":["helpers/delay.ts","components/lazy-component.tsx","helpers/urls.ts","components/nft-card.tsx","components/nft-loader.tsx","components/lazy-list.tsx","components/nft-project.tsx","components/nft-projects.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["delay","timeout","a","Promise","resolve","setTimeout","globalRelayoutCallbacks","Date","now","activeNotifyRelayoutId","notifyRelayout","notifyRelayoutId","i","length","callback","window","addEventListener","IntersectionObserver","observe","document","getElementsByTagName","nextLazyComponentId","LazyComponent","children","onLoad","placeholderRef","useRef","useState","shouldLoad","setShouldLoad","isDoneRef","useEffect","current","placeholder","iRelayout","push","divRect","getBoundingClientRect","screenBottom","scrollY","innerHeight","top","unsub","ref","style","minWidth","minHeight","getProjectJsonUrl","projectKey","getNftJsonUrl","tokenId","getIpfsUrl","nftUrl","replace","NftCardPlaceholder","props","className","height","NftCard","nft","name","rarityScore","toFixed","href","external_url","alt","src","image","display","flexDirection","fontSize","color","flex","attributeRarities","map","x","Fragment","trait_type","value","fontWeight","position","zIndex","width","ratio","ratioScore","NftLoader","setNft","fetch","result","json","obj","LazyList","items","getItemKey","ItemComponent","loadCount","setLoadCount","lastLoadCount","itemsLoaded","slice","index","s","onLoaded","item","NftProjectLoader","projectRarity","setProjectRarity","nftProjectUrl","loaded","loadProjectRarityData","doc","traitTypes","Set","tokenLookups","forEach","traitType","traitTypeTokenLookups","filter","includedTokenIds","flatMap","tokenIds","missingTokenIds","tokenIdsByRank","t","has","trait_value","NftProject","setTokenIds","onSelect","args","tokens","onClick","location","TraitTypesList","TraitValuesList","NftProjectsLoader","projects","NftProjects","project","projectMetadata","NftProjectCard","external_link","App","route","pathname","split","undefined","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"ySAAO,SAAeA,EAAtB,kC,4CAAO,WAAqBC,GAArB,SAAAC,EAAA,sEACU,IAAIC,SAAQ,SAACC,GACtBC,WAAWD,EAASH,MAFrB,oF,iCCIDK,GADkBC,KAAKC,MACG,IAC5BC,EAAyB,EACvBC,EAAc,uCAAG,gCAAAR,EAAA,6DAGnBO,IACIE,EAAmBF,EAJJ,SAKbT,EAAM,KALO,OASfY,EAAI,EATW,YAUbA,EAAIN,EAAwBO,QAVf,sBAWTC,EAAWR,EAAwBM,MAC1BE,IAZA,kCAaLd,EAAM,IAbD,WAefY,IAEGD,IAAqBF,EAjBT,8GAAH,qDAwBpBM,OAAOC,iBAAiB,SAAUN,GAClCK,OAAOC,iBAAiB,QAAQ,WACX,IAAIC,qBAAqBP,GAEjCQ,QAAQC,SAASC,qBAAqB,QAAQ,OAG3D,IAAIC,EAAsB,EAEbC,EAAgB,SAAC,GAMxB,IALFC,EAKC,EALDA,SACAC,EAIC,EAJDA,OAMMC,EAAiBC,iBAAO,MAC9B,EAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAYJ,kBAAO,GACDA,iBAAOL,KAuD/B,OArDAU,qBAAU,WAGN,GAAKN,EAAeO,QAApB,CAIA,IAAMC,EAAcR,EAAeO,QACnCF,EAAUE,SAAU,EAEpB,IA4BME,EAAY5B,EAAwBO,OAC1CP,EAAwB6B,MA7BF,WAGlB,IAAKV,EAAeO,QAEhB,OAAO,EAEX,GAAIF,EAAUE,QAEV,OAAO,EAGX,IAAMI,EAAUH,EAAYI,wBACtBC,EAAevB,OAAOwB,QAAUxB,OAAOyB,YAG7C,OAFmBJ,EAAQK,IAAMH,IAKjCR,EAAUE,SAAU,EACpBU,IACAb,GAAc,GACdnB,IACM,OAANc,QAAM,IAANA,QAEO,MAKX,IAAMkB,EAAQ,WACVpC,EAAwB4B,GAAa,MAKzC,OAFAxB,IAEO,WACHoB,EAAUE,SAAU,EACpBU,QAEN,CAACnB,EAAUC,IAIT,sCACMI,GAAc,qBAAKe,IAAKlB,EAAgBmB,MAAO,CAACC,SAAU,IAAKC,UAAW,OAC3ElB,GAAcL,MC3GdwB,EAAoB,SAACC,GAAD,sBAA8BA,EAA9B,kBACpBC,EAAgB,SAACD,EAAmBE,GAApB,sBAA+CF,EAA/C,YAA6DE,EAA7D,UAChBC,EAAa,SAACC,GAAD,OAAmBA,EAAOC,QAAQ,UAAW,uCCE1DC,EAAqB,SAACC,GAC/B,OACI,mCACI,qBAAKC,UAAW,WAAhB,SACI,qBAAKZ,MAAO,CAACa,OAAQ,KAArB,6BAMHC,EAAU,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,IAErB,OACI,mCACI,sBAAKH,UAAW,WAAhB,UAEI,8BAAK,4BAAIG,EAAIA,IAAIC,SACjB,gCAAK,8CAAL,IAA2BD,EAAIE,YAAYC,QAAQ,MACnD,8BACI,mBAAGC,KAAMZ,EAAWQ,EAAIA,IAAIK,cAA5B,6BAGJ,qBAAKR,UAAW,iBAAhB,SACI,cAAC,EAAD,UACI,qBAAKS,IAAI,MAAMC,IAAKf,EAAWQ,EAAIA,IAAIQ,aAG/C,gCACI,sBAAKvB,MAAO,CAAEwB,QAAQ,OAAQC,cAAc,MAAOC,SAAS,QAASC,MAAO,SAA5E,UACY,qBAAK3B,MAAO,CAAC4B,KAAM,GAAnB,SAAwB,YACxB,qBAAK5B,MAAO,CAAC4B,KAAM,GAAnB,SAAwB,cACxB,qBAAK5B,MAAO,CAAC4B,KAAM,GAAnB,SAAwB,gBACxB,qBAAK5B,MAAO,CAAC4B,KAAM,GAAnB,SAAwB,oBAEnCb,EAAIc,kBAAkBC,KAAI,SAAAC,GAAC,OACxB,cAAC,IAAMC,SAAP,UACI,sBAAKhC,MAAO,CAAEwB,QAAQ,OAAQC,cAAc,OAA5C,UACI,qBAAKzB,MAAO,CAAC4B,KAAM,GAAnB,SAAwBG,EAAEE,aAC1B,qBAAKjC,MAAO,CAAC4B,KAAM,GAAnB,SACI,sBAAM5B,MAAmB,cAAZ+B,EAAEG,MAAsB,CAACC,WAAW,QAAQ,GAAzD,SAA8DJ,EAAEG,UAEpE,sBAAKlC,MAAO,CAAC4B,KAAM,EAAGQ,SAAS,YAA/B,UACI,qBAAKxB,UAAU,iBAAiBZ,MAAO,CACnCoC,SAAS,WACTC,OAAQ,EACRC,MAAM,GAAD,QAAM,IAAMP,EAAEQ,OAAOrB,QAAQ,GAA7B,KACLL,OAAQ,UAGZ,qBAAKb,MAAO,CAAC2B,MAAM,UAAWS,SAAS,WAAYC,OAAQ,IAA3D,oBACS,IAAMN,EAAEQ,OAAOrB,QAAQ,GADhC,UAIJ,qBAAKlB,MAAO,CAAC4B,KAAM,GAAnB,mBAA2BG,EAAES,WAAWtB,QAAQ,UAlBnCa,EAAEE,wBCnClCQ,EAAY,SAAC,GAAiE,IAA/DrC,EAA8D,EAA9DA,WAAYE,EAAkD,EAAlDA,QAEpC,EAAsBvB,mBAAS,MAA/B,mBAAOgC,EAAP,KAAY2B,EAAZ,KAaA,OAXAvD,qBAAU,WACN,sBAAC,gCAAA7B,EAAA,6DACSkD,EAASH,EAAcD,EAAYE,GAD5C,SAGwBqC,MAAMnC,GAH9B,cAGSoC,EAHT,gBAIqBA,EAAOC,OAJ5B,OAISC,EAJT,OAKGJ,EAAOI,GALV,0CAAD,KAOD,CAAC1C,EAAYE,IAIZ,sCACMS,GAAO,cAAC,EAAD,IACRA,GAAO,cAAC,EAAD,CAASA,IAAKA,Q,OCnBrBgC,EAAW,YAQnB,IAPDC,EAOA,EAPAA,MACAC,EAMA,EANAA,WACAC,EAKA,EALAA,cASA,EAAkCnE,mBAFhB,IAElB,mBAAOoE,EAAP,KAAkBC,EAAlB,KACMC,EAAgBvE,iBAHJ,IAIlBuE,EAAcjE,QAAU+D,EAExB,IAYMG,EAAcN,EAAMO,MAAM,EAAGJ,GAInC,OACI,mCACKG,EAAYxB,KAAI,SAACC,EAAEyB,GAAH,OACb,cAAC,IAAMxB,SAAP,UACI,cAAC,EAAD,CAAepD,OAAQ,kBApBtB,SAAC4E,GAEXH,EAAcjE,UAAY+D,IAG1BK,EAVgB,EAUSL,GAI5BC,GAAa,SAAAK,GAAC,OAAGA,EAfH,OA0B2BC,CAASF,IAAtC,SACI,cAACN,EAAD,CAAeS,KAAM5B,OAFRkB,EAAWlB,UC7BnC6B,EAAmB,SAAC,GAAwC,IAAtCxD,EAAqC,EAArCA,WAE/B,EAA0CrB,mBAAS,MAAnD,mBAAO8E,EAAP,KAAsBC,EAAtB,KAeJ,OAbI3E,qBAAU,WACN,sBAAC,kCAAA7B,EAAA,6DACSyG,EAAgB5D,EAAkBC,GAD3C,SAGwBuC,MAAMoB,GAH9B,cAGSnB,EAHT,gBAIqBA,EAAOC,OAJ5B,OAISC,EAJT,OAMSkB,EAASC,EAAsBnB,GAErCgB,EAAiBE,GARpB,0CAAD,KAUD,CAAC5D,IAGJ,mCACKyD,GAAiB,cAAC,EAAD,CAAYzD,WAAYA,EAAYyD,cAAeA,OAUvEI,EAAwB,SAACC,GAC3B,IAAMC,EAAU,YAAO,IAAIC,IAAIF,EAAIG,aAAavC,KAAI,SAAAC,GAAC,OAAEA,EAAEE,gBAyBzD,OAtBAkC,EAAWG,SAAQ,SAAAC,GACf,IAAMC,EAAwBN,EAAIG,aAC7BI,QAAO,SAAA1C,GAAC,OAAEA,EAAEE,aAAesC,KAC1BG,EAAmB,IAAIN,IAAII,EAAsBG,SAAQ,SAAA5C,GAAC,OAAEA,EAAE6C,aAC9DC,EAAkBX,EAAIY,eAAeL,QAAO,SAAAM,GAAC,OAAKL,EAAiBM,IAAID,MAE1EF,EAAgB5G,QACfiG,EAAIG,aAAa9E,KAAK,CAClB0C,WAAYsC,EACZU,YA5CkD,YA6ClDL,SAAUC,IAKlBX,EAAIG,aAAa9E,KAAK,CAClB0C,WAAYsC,EACZU,YAAa,QACbL,SAAUV,EAAIY,oBAIf,CACHA,eAAgBZ,EAAIY,eACpBT,aAAcH,EAAIG,aAClBF,eAIKe,EAAa,SAAC,GAA6F,IAA3F9E,EAA0F,EAA1FA,WAAYyD,EAA8E,EAA9EA,cAErC,EAAgC9E,mBAAS8E,EAAciB,gBAAvD,mBAAOF,EAAP,KAAiBO,EAAjB,KAMA,OACI,qCACI,8BACI,cAAC,EAAD,CAAgBtB,cAAeA,EAAeuB,SAPzC,SAACC,GACdF,EAAYE,EAAKC,aAQb,qBAAK1E,UAAU,WAAf,SACKiD,GACG,cAAC,EAAD,CAAUb,MAAO4B,EAAU3B,WAAY,SAAAlB,GAAC,gBAAKA,IAAKmB,cAAe,gBAAES,EAAF,EAAEA,KAAF,OAC7D,qBAAK4B,QAAS,kBAAIpH,OAAOqH,SAASrE,KAAhB,UAAwBf,EAAxB,YAAsCuD,IAAxD,SACI,cAAC,EAAD,CAAWvD,WAAYA,EAAYE,QAAO,UAAKqD,gBAS9D8B,EAAiB,SAAC,GAAsJ,IAApJ5B,EAAmJ,EAAnJA,cAAeuB,EAAoI,EAApIA,SAC5C,OACI,qBAAKxE,UAAU,kBAAf,SACKiD,EAAcM,WAAWrC,KAAI,SAAAC,GAAC,OAC3B,cAAC,IAAMC,SAAP,UACI,cAAC,EAAD,CAAiBuC,UAAWxC,EAAG8B,cAAeA,EAAeuB,SAAUA,KADtDrD,SAQxB2D,EAAkB,SAAC,GAAoL,IAAlLnB,EAAiL,EAAjLA,UAAWV,EAAsK,EAAtKA,cAAeuB,EAAuJ,EAAvJA,SAElDZ,EAAwBX,EAAcQ,aACvCI,QAAO,SAAA1C,GAAC,OAAEA,EAAEE,aAAesC,KAEhC,OACI,sBAAK3D,UAAU,iBAAf,UACI,8BACK2D,IAEL,qBAAK3D,UAAU,mBAAf,SACK4D,EAAsB1C,KAAI,SAAAC,GAAC,OACxB,cAAC,IAAMC,SAAP,UACI,qBAAKpB,UAAU,kBAAkB2E,QAAS,kBAAIH,EAAS,CAACb,UAAWxC,EAAEE,WAAYC,MAAOH,EAAEkD,YAAaK,OAAQvD,EAAE6C,YAAjH,SACI,8BACK7C,EAAEkD,iBAHf,UAAwBlD,EAAEE,WAA1B,YAAwCF,EAAEkD,uBCnHjDU,EAAoB,SAAChF,GAE9B,MAAqC5B,mBAAS,MAA9C,mBAAO6G,EAAP,KAAiB9B,EAAjB,KAYJ,OAVI3E,qBAAU,WACN,sBAAC,8BAAA7B,EAAA,4DLZyB,sBKYzB,SAGwBqF,MLfC,uBKYzB,cAGSC,EAHT,gBAIqBA,EAAOC,OAJ5B,OAISC,EAJT,OAKGgB,EAAiBhB,GALpB,0CAAD,KAOD,IAGH,mCACK8C,GAAY,cAAC,EAAD,CAAaA,SAAUA,OAK/BC,EAAc,SAAC,GAAqD,IAAnDD,EAAkD,EAAlDA,SAC1B,OACI,mCACI,qBAAKhF,UAAU,WAAf,SACKgF,GACG,cAAC,EAAD,CAAU5C,MAAO4C,EAASA,SAAU3C,WAAY,SAAAlB,GAAC,gBAAKA,EAAE3B,aAAc8C,cAAe,gBAAES,EAAF,EAAEA,KAAF,OACjF,cAAC,EAAD,CAAgBvD,WAAYuD,EAAKvD,WAAY0F,QAASnC,EAAKoC,0BAStEC,EAAiB,SAAC,GAA+E,IAA9E5F,EAA6E,EAA7EA,WAAY0F,EAAiE,EAAjEA,QAExC,OACI,mCACI,sBAAKlF,UAAW,WAAhB,UAEI,8BAAK,4BAAIkF,EAAQ9E,SACjB,8BACI,mBAAGG,KAAMZ,EAAWuF,EAAQG,eAA5B,6BAGJ,qBAAKrF,UAAW,iBAAkB2E,QAAS,kBAAIpH,OAAOqH,SAASrE,KAAhB,UAAwBf,IAAvE,SACI,cAAC,EAAD,UACI,qBAAKiB,IAAI,MAAMC,IAAKf,EAAWuF,EAAQvE,mBChBhD2E,MAjCf,WAAgB,IAAD,IAEPC,EAAQhI,OAAOqH,SAASY,SAASC,MAAM,KACvCjG,EAAU,UAAG+F,EAAM,UAAT,aAAeG,EACzBhG,EAAO,UAAG6F,EAAM,UAAT,aAAeG,EAI5B,OAFAC,QAAQC,IAAI,QAAS,CAACL,QAAO/F,aAAYE,YAEtCF,GAAcE,EAEb,qBAAKM,UAAU,MAAf,SACE,qBAAKA,UAAU,uBAAf,SACE,cAAC,EAAD,CAAWR,WAAYA,EAAYE,QAASA,QAMjDF,EAEC,qBAAKQ,UAAU,MAAf,SACE,cAAC,EAAD,CAAkBR,WAAYA,MAMlC,qBAAKQ,UAAU,MAAf,SACI,cAAC,EAAD,OCrBO6F,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7I,SAAS8I,eAAe,SAM1BZ,M","file":"static/js/main.e0f6162a.chunk.js","sourcesContent":["export async function delay(timeout: number): Promise<void> {\n    return await new Promise((resolve) => {\n        setTimeout(resolve, timeout);\n    });\n}","import React, { ReactNode, useEffect, useRef, useState } from 'react';\nimport { delay } from '../helpers/delay';\n\nconst debug_timeStart = Date.now();\nconst globalRelayoutCallbacks = [] as (null | (()=>boolean))[];\nlet activeNotifyRelayoutId = 0;\nconst notifyRelayout = async () => {\n\n    // Cancellable\n    activeNotifyRelayoutId++;\n    let notifyRelayoutId = activeNotifyRelayoutId;\n    await delay(100);\n\n    // console.log('LazyComponent notifyRelayout', {notifyRelayoutId});\n    \n    let i = 0;\n    while(i < globalRelayoutCallbacks.length){\n        const callback = globalRelayoutCallbacks[i];\n        if(callback && callback()){\n            await delay(25);\n        }\n        i++;\n\n        if(notifyRelayoutId !== activeNotifyRelayoutId){\n            // Cancelled\n            // console.log('LazyComponent notifyRelayout - Cancelled', {notifyRelayoutId});\n            return;\n        }\n    }\n};\nwindow.addEventListener('scroll', notifyRelayout);\nwindow.addEventListener('load', ()=>{\n    const observer = new IntersectionObserver(notifyRelayout);\n    // Observe any element\n    observer.observe(document.getElementsByTagName('body')[0]);\n});\n\nlet nextLazyComponentId = 0;\n\nexport const LazyComponent = ({ \n    children,\n    onLoad,\n}:{ \n    children: ReactNode,\n    onLoad?: () => void,\n })=>{\n\n    const placeholderRef = useRef(null as null | HTMLDivElement);\n    const [shouldLoad, setShouldLoad] = useState(false);\n    const isDoneRef = useRef(false);\n    const lazyComponentId = useRef(nextLazyComponentId++);\n\n    useEffect(() => {\n        // console.log('LazyComponent useEffect', {lazyComponentId});\n\n        if( !placeholderRef.current ){ \n            // console.log('LazyComponent useEffect - SKIP placeholderRef is missing', {lazyComponentId});\n            return; \n        }\n        const placeholder = placeholderRef.current;\n        isDoneRef.current = false;\n      \n        const loadIfVisible = () => {\n            // console.log('LazyComponent useEffect:loadIfVisible', {lazyComponentId});\n\n            if( !placeholderRef.current ){ \n                // console.log('LazyComponent useEffect:loadIfVisible - SKIP placeholderRef is missing', {lazyComponentId});\n                return false; \n            }\n            if( isDoneRef.current ){ \n                // console.log('LazyComponent useEffect:loadIfVisible - SKIP isDone', {lazyComponentId});\n                return false; \n            }\n\n            const divRect = placeholder.getBoundingClientRect();\n            const screenBottom = window.scrollY + window.innerHeight;\n            const isOnScreen = divRect.top < screenBottom;\n\n            if(!isOnScreen){ return false; }\n            // console.log(`isOnScreen`,{ time: Date.now() - debug_timeStart, iRelayout, divRect, screenBottom, isOnScreen });\n            \n            isDoneRef.current = true;\n            unsub();\n            setShouldLoad(true);\n            notifyRelayout();\n            onLoad?.();\n\n            return true;\n        };\n\n        const iRelayout = globalRelayoutCallbacks.length;\n        globalRelayoutCallbacks.push(loadIfVisible);\n        const unsub = ()=>{\n            globalRelayoutCallbacks[iRelayout] = null;\n        };\n\n        notifyRelayout();\n\n        return () => {\n            isDoneRef.current = true;\n            unsub();\n        };\n    },[children, onLoad]);\n\n    // console.log('LazyComponent RENDER', {lazyComponentId});\n    return (\n        <>  \n            {!shouldLoad && <div ref={placeholderRef} style={{minWidth: 300, minHeight: 300}}/>}\n            {shouldLoad && children}\n        </>\n    );\n};","export const getProjectsJsonUrl = ()=>`/data/projects.json`;\nexport const getProjectJsonUrl = (projectKey:string)=>`/data/${projectKey}/project.json`;\nexport const getNftJsonUrl = (projectKey:string, tokenId: string)=>`/data/${projectKey}/${tokenId}.json`;\nexport const getIpfsUrl = (nftUrl:string) => nftUrl.replace('ipfs://', 'https://gateway.pinata.cloud/ipfs/');\n","import React from 'react';\nimport { INftRarity } from '@crypto-dev-amigos/common';\nimport { LazyComponent } from './lazy-component';\nimport { getIpfsUrl } from '../helpers/urls';\n\nexport const NftCardPlaceholder = (props:{})=>{\n    return (\n        <>\n            <div className={'nft-card'}>\n                <div style={{height: 300}}>Loading...</div>\n            </div>\n        </>\n    );\n}\n\nexport const NftCard = ({nft}:{ nft: INftRarity }) => {\n\n    return (\n        <>\n            <div className={'nft-card'}>\n                {/* <div><b>Token ID:</b> {nft.nft.id}</div> */}\n                <div><b>{nft.nft.name}</b></div>\n                <div><b>Rarity Score:</b> {nft.rarityScore.toFixed(2)}</div>\n                <div>\n                    <a href={getIpfsUrl(nft.nft.external_url)}>External Link</a>\n                </div>\n\n                <div className={'nft-card-image'}>\n                    <LazyComponent>\n                        <img alt='nft' src={getIpfsUrl(nft.nft.image)}/>\n                    </LazyComponent>\n                </div>\n                <div>\n                    <div style={{ display:'flex', flexDirection:'row', fontSize:`0.8em`, color: 'white' }}>\n                                <div style={{flex: 1}}>{'Content'}</div>\n                                <div style={{flex: 1}}>{'Attribute'}</div>\n                                <div style={{flex: 1}}>{'Commonality'}</div>\n                                <div style={{flex: 1}}>{'Rarity Score'}</div>\n                    </div>\n                    {nft.attributeRarities.map(x=>(\n                        <React.Fragment key={x.trait_type}>\n                            <div style={{ display:'flex', flexDirection:'row' }}>\n                                <div style={{flex: 1}}>{x.trait_type}</div>\n                                <div style={{flex: 1}}>\n                                    <span style={x.value !== \"[Missing]\"?{fontWeight:'bold'}:{}}>{x.value}</span>\n                                </div>\n                                <div style={{flex: 1, position:'relative'}}>\n                                    <div className='bar-background' style={{\n                                        position:'absolute',\n                                        zIndex: 0,\n                                        width: `${(100 * x.ratio).toFixed(0)}%`,\n                                        height: '100%',\n                                        }}>\n                                    </div>\n                                    <div style={{color:'#FFFFFF', position:'relative', zIndex: 10}}>\n                                        {`${(100 * x.ratio).toFixed(2)}%`}\n                                    </div>\n                                </div>\n                                <div style={{flex: 1}}>{`${x.ratioScore.toFixed(2)}`}</div>                                \n                            </div>\n                        </React.Fragment>\n                    ))}\n                </div>\n            </div>\n        </>\n    );\n};\n\n","import React, { useEffect, useState } from 'react';\nimport { INftRarityDocument } from '@crypto-dev-amigos/common';\nimport { NftCard, NftCardPlaceholder } from './nft-card';\nimport { getNftJsonUrl } from '../helpers/urls';\n\nexport const NftLoader = ({ projectKey, tokenId }:{ projectKey:string, tokenId:string })=>{\n\n    const [nft, setNft] = useState(null as null | INftRarityDocument);\n\n    useEffect(() => {\n        (async () => {\n            const nftUrl = getNftJsonUrl(projectKey, tokenId);\n            // console.log('NftLoader', {nftUrl});\n            const result = await fetch(nftUrl);\n            const obj = await result.json() as INftRarityDocument;\n            setNft(obj);\n        })();\n    }, [projectKey, tokenId]);\n\n    // console.log('NftLoader RENDER', {projectKey, tokenId});\n    return (\n        <>\n            {!nft && <NftCardPlaceholder />}\n            {nft && <NftCard nft={nft}/>}\n        </>\n    );\n};","import React, { useRef } from 'react';\nimport { useState } from 'react';\nimport { LazyComponent } from './lazy-component';\n\nexport const LazyList = <T extends {}>({\n    items, \n    getItemKey, \n    ItemComponent \n}:{ \n    items:T[], \n    getItemKey:(item:T)=>string, \n    ItemComponent: (props:{item:T}) => JSX.Element,\n})=>{\n\n    const PAGE_SIZE = 12;\n    const NEAR_END_COUNT = 3;\n    const [loadCount, setLoadCount] = useState(PAGE_SIZE);\n    const lastLoadCount = useRef(PAGE_SIZE);\n    lastLoadCount.current = loadCount;\n\n    const onLoaded = (index:number)=>{\n        // Skip if already loaded more\n        if(lastLoadCount.current !== loadCount){ return; }\n\n        // Skip if not near the end\n        if(index + NEAR_END_COUNT < loadCount){ return; }\n\n        // Load more\n        // console.log('# LazyList: loadMore', {loadCount});\n        setLoadCount(s=> s + PAGE_SIZE);\n    }\n\n    const itemsLoaded = items.slice(0, loadCount);\n\n    \n    // console.log('LazyList RENDER', {itemsLength: items.length, loadedLength: itemsLoaded.length});\n    return (\n        <>\n            {itemsLoaded.map((x,index)=>(\n                <React.Fragment key={getItemKey(x)} >\n                    <LazyComponent onLoad={() => onLoaded(index)}>\n                        <ItemComponent item={x}/>\n                    </LazyComponent>\n                </React.Fragment>\n            ))}\n        </>\n    );\n};\n\n","import React, { useEffect, useState } from 'react';\nimport type { INftProjectRarityDocument, INftRarity, MISSING_ATTRIBUTE_VALUE as MISSING_ATTRIBUTE_VALUE_TYPE } from '@crypto-dev-amigos/common';\nimport { NftCard } from './nft-card';\nimport { LazyList } from './lazy-list';\nimport { NftLoader } from './nft-loader';\nimport { getNftJsonUrl, getProjectJsonUrl } from '../helpers/urls';\n\n// Workaround for importing implementation\nconst MISSING_ATTRIBUTE_VALUE: typeof MISSING_ATTRIBUTE_VALUE_TYPE = `[Missing]`;\n\nexport const NftProjectLoader = ({ projectKey }:{ projectKey:string })=>{\n\n    const [projectRarity, setProjectRarity] = useState(null as null | INftProjectRarityData);\n\n    useEffect(() => {\n        (async () => {\n            const nftProjectUrl = getProjectJsonUrl(projectKey);\n            // console.log('projectKey', { projectKey, nftProjectUrl });\n            const result = await fetch(nftProjectUrl);\n            const obj = await result.json() as INftProjectRarityDocument;\n\n            const loaded = loadProjectRarityData(obj);\n\n            setProjectRarity(loaded);\n        })();\n    }, [projectKey]);\n\nreturn (\n    <>\n        {projectRarity && <NftProject projectKey={projectKey} projectRarity={projectRarity} />}\n    </>\n);\n};\n\ntype INftProjectRarityData = {\n    tokenIdsByRank: INftProjectRarityDocument['tokenIdsByRank']\n    tokenLookups: INftProjectRarityDocument['tokenLookups'],\n    traitTypes: string[];\n};\nconst loadProjectRarityData = (doc: INftProjectRarityDocument): INftProjectRarityData => {\n    const traitTypes = [...new Set(doc.tokenLookups.map(x=>x.trait_type))];\n\n    // Add [Missing] and [All]\n    traitTypes.forEach(traitType => {\n        const traitTypeTokenLookups = doc.tokenLookups\n            .filter(x=>x.trait_type === traitType);\n        const includedTokenIds = new Set(traitTypeTokenLookups.flatMap(x=>x.tokenIds));\n        const missingTokenIds = doc.tokenIdsByRank.filter(t => !includedTokenIds.has(t));\n        // Missing\n        if(missingTokenIds.length){\n            doc.tokenLookups.push({\n                trait_type: traitType,\n                trait_value: MISSING_ATTRIBUTE_VALUE,\n                tokenIds: missingTokenIds\n            });\n        }\n\n        // All\n        doc.tokenLookups.push({\n            trait_type: traitType,\n            trait_value: '[All]',\n            tokenIds: doc.tokenIdsByRank,\n        });\n    });\n\n    return {\n        tokenIdsByRank: doc.tokenIdsByRank,\n        tokenLookups: doc.tokenLookups,\n        traitTypes,\n    };\n};\n\nexport const NftProject = ({ projectKey, projectRarity }:{ projectKey:string, projectRarity:INftProjectRarityData}) => {\n\n    const [tokenIds, setTokenIds] = useState(projectRarity.tokenIdsByRank);\n\n    const onSelect = (args: { traitType: string, value: string, tokens: number[] }) => {\n        setTokenIds(args.tokens);\n    };\n\n    return (\n        <>\n            <div>\n                <TraitTypesList projectRarity={projectRarity} onSelect={onSelect}/>\n            </div>\n            <div className='nft-list'>\n                {projectRarity && (\n                    <LazyList items={tokenIds} getItemKey={x=>`${x}`} ItemComponent={({item})=>(\n                        <div onClick={()=>window.location.href=`${projectKey}/${item}`}>\n                            <NftLoader projectKey={projectKey} tokenId={`${item}`} />\n                        </div>\n                    )}/>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport const TraitTypesList = ({ projectRarity, onSelect }:{ projectRarity:INftProjectRarityData, onSelect: (args:{ traitType: string, value: string, tokens: number[] })=>void })=>{\n    return (\n        <div className='nft-trait-types'>\n            {projectRarity.traitTypes.map(x=>(\n                <React.Fragment key={x}>\n                    <TraitValuesList traitType={x} projectRarity={projectRarity} onSelect={onSelect} />\n                </React.Fragment>\n            ))}\n        </div>\n    );\n};\n\nexport const TraitValuesList = ({ traitType, projectRarity, onSelect }:{ traitType: string, projectRarity:INftProjectRarityData, onSelect: (args:{ traitType: string, value: string, tokens: number[] })=>void })=>{\n   \n    const traitTypeTokenLookups = projectRarity.tokenLookups\n        .filter(x=>x.trait_type === traitType);\n   \n    return (\n        <div className='nft-trait-type'>\n            <div>\n                {traitType}\n            </div>\n            <div className='nft-trait-values'>\n                {traitTypeTokenLookups.map(x=>(\n                    <React.Fragment key={`${x.trait_type}:${x.trait_value}`}>\n                        <div className='nft-trait-value' onClick={()=>onSelect({traitType: x.trait_type, value: x.trait_value, tokens: x.tokenIds})}>\n                            <div>\n                                {x.trait_value}\n                            </div>\n                        </div>\n                    </React.Fragment>\n                ))}\n            </div>\n        </div>\n    );\n};\n\n","import React, { useEffect, useState } from 'react';\nimport { INftProjectMetadata, INftProjectsDocument } from '@crypto-dev-amigos/common';\nimport { LazyList } from './lazy-list';\nimport { NftLoader } from './nft-loader';\nimport { getIpfsUrl, getProjectsJsonUrl } from '../helpers/urls';\nimport { LazyComponent } from './lazy-component';\n\nexport const NftProjectsLoader = (props:{ })=>{\n\n    const [projects, setProjectRarity] = useState(null as null | INftProjectsDocument);\n\n    useEffect(() => {\n        (async () => {\n            const nftProjectUrl = getProjectsJsonUrl();\n            // console.log('projectKey', { projectKey, nftProjectUrl });\n            const result = await fetch(nftProjectUrl);\n            const obj = await result.json() as INftProjectsDocument;\n            setProjectRarity(obj);\n        })();\n    }, []);\n\nreturn (\n    <>\n        {projects && <NftProjects projects={projects} />}\n    </>\n);\n};\n\nexport const NftProjects = ({ projects }:{ projects: INftProjectsDocument }) => {\n    return (\n        <>\n            <div className='nft-list'>\n                {projects && (\n                    <LazyList items={projects.projects} getItemKey={x=>`${x.projectKey}`} ItemComponent={({item})=>(\n                        <NftProjectCard projectKey={item.projectKey} project={item.projectMetadata} />\n                    )}/>\n                )}\n            </div>\n        </>\n    );\n};\n\n\nexport const NftProjectCard = ({projectKey, project}:{ projectKey:string, project: INftProjectMetadata }) => {\n\n    return (\n        <>\n            <div className={'nft-card'}>\n                {/* <div><b>Token ID:</b> {nft.nft.id}</div> */}\n                <div><b>{project.name}</b></div>\n                <div>\n                    <a href={getIpfsUrl(project.external_link)}>External Link</a>\n                </div>\n\n                <div className={'nft-card-image'} onClick={()=>window.location.href=`${projectKey}`}>\n                    <LazyComponent>\n                        <img alt='nft' src={getIpfsUrl(project.image)}/>\n                    </LazyComponent>\n                </div>\n            </div>\n        </>\n    );\n};\n\n","import React from 'react';\nimport './CssReset.css';\nimport './App.css';\nimport { NftLoader } from './components/nft-loader';\nimport { NftProjectLoader } from './components/nft-project';\nimport { NftProjectsLoader } from './components/nft-projects';\n\nfunction App() {\n\n  const route = window.location.pathname.split('/');\n  const projectKey = route[1] ?? undefined;\n  const tokenId = route[2] ?? undefined;\n\n  console.log('route', {route, projectKey, tokenId});\n\n  if(projectKey && tokenId){\n    return (\n      <div className=\"App\">\n        <div className='nft-container-single'>\n          <NftLoader projectKey={projectKey} tokenId={tokenId}/>\n        </div>\n      </div>\n    );\n  }\n\n  if(projectKey){\n    return (\n      <div className=\"App\">\n        <NftProjectLoader projectKey={projectKey}/>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n        <NftProjectsLoader/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}