{"version":3,"sources":["components/lazy-component.tsx","helpers/urls.ts","components/nft-card.tsx","components/nft-loader.tsx","components/lazy-list.tsx","components/nft-project.tsx","components/nft-projects.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["nextLazyComponentId","LazyComponent","children","placeholderRef","useRef","useState","shouldLoad","setShouldLoad","isDoneRef","useEffect","current","lazyComponentId","setTimeout","placeholder","IntersectionObserver","entries","observer","some","x","isIntersecting","console","log","unobserve","threshold","observe","ref","style","minWidth","minHeight","getProjectJsonUrl","projectKey","getNftJsonUrl","tokenId","getIpfsUrl","nftUrl","replace","NftCardPlaceholder","props","className","height","NftCard","nft","name","rarityScore","toFixed","href","external_url","alt","src","image","display","flexDirection","fontSize","color","flex","attributeRarities","map","Fragment","trait_type","value","fontWeight","position","zIndex","width","ratio","ratioScore","NftLoader","setNft","a","fetch","result","json","obj","LazyList","items","getItemKey","ItemComponent","item","NftProjectLoader","projectRarity","setProjectRarity","nftProjectUrl","NftProject","tokens","onClick","window","location","NftProjectsLoader","projects","NftProjects","project","projectMetadata","NftProjectCard","external_link","App","route","pathname","split","undefined","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee96c201.chunk.js","sourcesContent":["import React, { ReactNode, useEffect, useRef, useState } from 'react';\nimport { delay } from '../helpers/delay';\n\nlet nextLazyComponentId = 0;\nexport const LazyComponent = ({ \n    children,\n}:{ \n    children: ReactNode,\n })=>{\n\n    const placeholderRef = useRef(null as null | HTMLDivElement);\n    const [shouldLoad, setShouldLoad] = useState(false);\n    const isDoneRef = useRef(false);\n\n    useEffect(() => {\n        if( !placeholderRef.current ){ return; }\n\n        const lazyComponentId = nextLazyComponentId++;\n      \n        const loadComponent = () => {\n            if( !placeholderRef.current ){ return; }\n            if( isDoneRef.current ){return;}\n\n            console.log(`loadComponent`, {lazyComponentId});\n            \n            isDoneRef.current = true;\n            setShouldLoad(true);\n        };\n\n\n        setTimeout(()=>{\n            if( !placeholderRef.current ){ return; }\n\n            const placeholder = placeholderRef.current;\n            const observer = new IntersectionObserver((entries, observer)=>{\n                if( !placeholderRef.current ){ \n                    observer.unobserve(placeholder);\n                    return;\n                }\n\n                if(entries.some(x=>x.isIntersecting)){\n                    loadComponent();\n                    observer.unobserve(placeholder);\n                }\n            },{\n                threshold: 0.1,\n            });\n            observer.observe(placeholderRef.current);\n        }, 100);\n\n        return () => {\n            isDoneRef.current = true;\n        };\n    },[]);\n\n    return (\n        <>  \n            {!shouldLoad && <div ref={placeholderRef} style={{minWidth: 1000, minHeight: 1000}}/>}\n            {shouldLoad && children}\n        </>\n    );\n};","export const getProjectsJsonUrl = ()=>`/data/projects.json`;\nexport const getProjectJsonUrl = (projectKey:string)=>`/data/${projectKey}/project.json`;\nexport const getNftJsonUrl = (projectKey:string, tokenId: string)=>`/data/${projectKey}/${tokenId}.json`;\nexport const getIpfsUrl = (nftUrl:string) => nftUrl.replace('ipfs://', 'https://gateway.pinata.cloud/ipfs/');\n","import React from 'react';\nimport { INftRarity } from '@crypto-dev-amigos/common';\nimport { LazyComponent } from './lazy-component';\nimport { getIpfsUrl } from '../helpers/urls';\n\nexport const NftCardPlaceholder = (props:{})=>{\n    return (\n        <>\n            <div className={'nft-card'}>\n                <div style={{height: 300}}>Loading...</div>\n            </div>\n        </>\n    );\n}\n\nexport const NftCard = ({nft}:{ nft: INftRarity }) => {\n\n    return (\n        <>\n            <div className={'nft-card'}>\n                {/* <div><b>Token ID:</b> {nft.nft.id}</div> */}\n                <div><b>{nft.nft.name}</b></div>\n                <div><b>Rarity Score:</b> {nft.rarityScore.toFixed(2)}</div>\n                <div>\n                    <a href={getIpfsUrl(nft.nft.external_url)}>External Link</a>\n                </div>\n\n                <div className={'nft-card-image'}>\n                    <LazyComponent>\n                        <img alt='nft' src={getIpfsUrl(nft.nft.image)}/>\n                    </LazyComponent>\n                </div>\n                <div>\n                    <div style={{ display:'flex', flexDirection:'row', fontSize:`0.8em`, color: 'white' }}>\n                                <div style={{flex: 1}}>{'Content'}</div>\n                                <div style={{flex: 1}}>{'Attribute'}</div>\n                                <div style={{flex: 1}}>{'Commonality'}</div>\n                                <div style={{flex: 1}}>{'Rarity Score'}</div>\n                    </div>\n                    {nft.attributeRarities.map(x=>(\n                        <React.Fragment key={x.trait_type}>\n                            <div style={{ display:'flex', flexDirection:'row' }}>\n                                <div style={{flex: 1}}>{x.trait_type}</div>\n                                <div style={{flex: 1}}>\n                                    <span style={x.value !== \"[Missing]\"?{fontWeight:'bold'}:{}}>{x.value}</span>\n                                </div>\n                                <div style={{flex: 1, position:'relative'}}>\n                                    <div className='bar-background' style={{\n                                        position:'absolute',\n                                        zIndex: 0,\n                                        width: `${(100 * x.ratio).toFixed(0)}%`,\n                                        height: '100%',\n                                        }}>\n                                    </div>\n                                    <div style={{color:'#FFFFFF', position:'relative', zIndex: 10}}>\n                                        {`${(100 * x.ratio).toFixed(2)}%`}\n                                    </div>\n                                </div>\n                                <div style={{flex: 1}}>{`${x.ratioScore.toFixed(2)}`}</div>                                \n                            </div>\n                        </React.Fragment>\n                    ))}\n                </div>\n            </div>\n        </>\n    );\n};\n\n","import React, { useEffect, useState } from 'react';\nimport { INftRarityDocument } from '@crypto-dev-amigos/common';\nimport { NftCard, NftCardPlaceholder } from './nft-card';\nimport { getNftJsonUrl } from '../helpers/urls';\n\nexport const NftLoader = ({ projectKey, tokenId }:{ projectKey:string, tokenId:string })=>{\n\n    const [nft, setNft] = useState(null as null | INftRarityDocument);\n\n    useEffect(() => {\n        (async () => {\n            const nftUrl = getNftJsonUrl(projectKey, tokenId);\n            console.log('NftLoader', {nftUrl});\n            const result = await fetch(nftUrl);\n            const obj = await result.json() as INftRarityDocument;\n            setNft(obj);\n        })();\n    }, [projectKey, tokenId]);\n\n    return (\n        <>\n            {!nft && <NftCardPlaceholder />}\n            {nft && <NftCard nft={nft}/>}\n        </>\n    );\n};","import React from 'react';\nimport { LazyComponent } from './lazy-component';\n\nexport const LazyList = <T extends {}>({\n    items, \n    getItemKey, \n    ItemComponent \n}:{ \n    items:T[], \n    getItemKey:(item:T)=>string, \n    ItemComponent: (props:{item:T}) => JSX.Element,\n})=>{\n\n    return (\n        <>\n            {items.map(x=>(\n                <LazyComponent key={getItemKey(x)}>\n                    <ItemComponent item={x}/>\n                </LazyComponent>\n            ))}\n        </>\n    );\n};\n\n","import React, { useEffect, useState } from 'react';\nimport { INftProjectRarityDocument, INftRarity } from '@crypto-dev-amigos/common';\nimport { NftCard } from './nft-card';\nimport { LazyList } from './lazy-list';\nimport { NftLoader } from './nft-loader';\nimport { getNftJsonUrl, getProjectJsonUrl } from '../helpers/urls';\n\nexport const NftProjectLoader = ({ projectKey }:{ projectKey:string })=>{\n\n    const [projectRarity, setProjectRarity] = useState(null as null | INftProjectRarityDocument);\n\n    useEffect(() => {\n        (async () => {\n            const nftProjectUrl = getProjectJsonUrl(projectKey);\n            // console.log('projectKey', { projectKey, nftProjectUrl });\n            const result = await fetch(nftProjectUrl);\n            const obj = await result.json() as INftProjectRarityDocument;\n            setProjectRarity(obj);\n        })();\n    }, [projectKey]);\n\nreturn (\n    <>\n        {projectRarity && <NftProject projectKey={projectKey} projectRarity={projectRarity} />}\n    </>\n);\n};\n\nexport const NftProject = ({ projectKey, projectRarity }:{ projectKey:string, projectRarity:INftProjectRarityDocument}) => {\n    return (\n        <>\n            <div className='nft-list'>\n                {projectRarity && (\n                    <LazyList items={projectRarity.tokens} getItemKey={x=>`${x.tokenId}`} ItemComponent={({item})=>(\n                        <div onClick={()=>window.location.href=`${projectKey}/${item.tokenId}`}>\n                            <NftLoader projectKey={projectKey} tokenId={`${item.tokenId}`} />\n                        </div>\n                    )}/>\n                )}\n            </div>\n        </>\n    );\n};","import React, { useEffect, useState } from 'react';\nimport { INftProjectMetadata, INftProjectsDocument } from '@crypto-dev-amigos/common';\nimport { LazyList } from './lazy-list';\nimport { NftLoader } from './nft-loader';\nimport { getIpfsUrl, getProjectsJsonUrl } from '../helpers/urls';\nimport { LazyComponent } from './lazy-component';\n\nexport const NftProjectsLoader = (props:{ })=>{\n\n    const [projects, setProjectRarity] = useState(null as null | INftProjectsDocument);\n\n    useEffect(() => {\n        (async () => {\n            const nftProjectUrl = getProjectsJsonUrl();\n            // console.log('projectKey', { projectKey, nftProjectUrl });\n            const result = await fetch(nftProjectUrl);\n            const obj = await result.json() as INftProjectsDocument;\n            setProjectRarity(obj);\n        })();\n    }, []);\n\nreturn (\n    <>\n        {projects && <NftProjects projects={projects} />}\n    </>\n);\n};\n\nexport const NftProjects = ({ projects }:{ projects: INftProjectsDocument }) => {\n    return (\n        <>\n            <div className='nft-list'>\n                {projects && (\n                    <LazyList items={projects.projects} getItemKey={x=>`${x.projectKey}`} ItemComponent={({item})=>(\n                        <NftProjectCard projectKey={item.projectKey} project={item.projectMetadata} />\n                    )}/>\n                )}\n            </div>\n        </>\n    );\n};\n\n\nexport const NftProjectCard = ({projectKey, project}:{ projectKey:string, project: INftProjectMetadata }) => {\n\n    return (\n        <>\n            <div className={'nft-card'}>\n                {/* <div><b>Token ID:</b> {nft.nft.id}</div> */}\n                <div><b>{project.name}</b></div>\n                <div>\n                    <a href={getIpfsUrl(project.external_link)}>External Link</a>\n                </div>\n\n                <div className={'nft-card-image'} onClick={()=>window.location.href=`${projectKey}`}>\n                    <LazyComponent>\n                        <img alt='nft' src={getIpfsUrl(project.image)}/>\n                    </LazyComponent>\n                </div>\n            </div>\n        </>\n    );\n};\n\n","import React from 'react';\nimport './CssReset.css';\nimport './App.css';\nimport { NftLoader } from './components/nft-loader';\nimport { NftProjectLoader } from './components/nft-project';\nimport { NftProjectsLoader } from './components/nft-projects';\n\nfunction App() {\n\n  const route = window.location.pathname.split('/');\n  const projectKey = route[1] ?? undefined;\n  const tokenId = route[2] ?? undefined;\n\n  console.log('route', {route, projectKey, tokenId});\n\n  if(projectKey && tokenId){\n    return (\n      <div className=\"App\">\n        <div className='nft-container-single'>\n          <NftLoader projectKey={projectKey} tokenId={tokenId}/>\n        </div>\n      </div>\n    );\n  }\n\n  if(projectKey){\n    return (\n      <div className=\"App\">\n        <NftProjectLoader projectKey={projectKey}/>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n        <NftProjectsLoader/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}